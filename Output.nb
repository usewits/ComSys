(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    197952,       4306]
NotebookOptionsPosition[    193013,       4141]
NotebookOutlinePosition[    193348,       4156]
CellTagsIndexPosition[    193305,       4153]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"plotstuff", "[", "a_", "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"(", 
    RowBox[{"Graphics", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Circle", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", "0.5"}], "]"}], ",", 
         RowBox[{"Text", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], "}"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Partition", "[", 
           RowBox[{"a", ",", "2"}], "]"}], ",", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"ToString", "[", "k", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", "1", ",", "7"}], "}"}]}], "]"}]}], "}"}], "//",
         "Transpose"}], ")"}]}], "]"}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"plotstuffsized", "[", 
    RowBox[{"a_", ",", "size_"}], "]"}], ":=", 
   RowBox[{"Image", "[", 
    RowBox[{
     RowBox[{"plotstuff", "[", "a", "]"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"size", ",", "size"}], "}"}]}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"showPhi", "[", 
    RowBox[{"phi_", ",", 
     RowBox[{"size_:", "100"}]}], "]"}], ":=", 
   RowBox[{"ImageAssemble", "[", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"plotstuffsized", "[", 
         RowBox[{
          RowBox[{"phi", "[", 
           RowBox[{"[", 
            RowBox[{"Floor", "[", "k", "]"}], "]"}], "]"}], ",", "size"}], 
         "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", "1", ",", "stringLength", ",", 
          RowBox[{"stringLength", "/", "9"}]}], "}"}]}], "]"}], ",", "3"}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"distance", "[", 
    RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
   RowBox[{"Norm", "[", 
    RowBox[{
     RowBox[{"a", "-", "b"}], ",", "2"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.6410422635549383`*^9, 3.641042690672819*^9}, {
   3.641042756145008*^9, 3.6410427589576283`*^9}, {3.641042833614562*^9, 
   3.641042835532948*^9}, 3.6410564774970617`*^9, {3.641057873640194*^9, 
   3.641057924347261*^9}, {3.64105806470109*^9, 3.641058073373865*^9}, {
   3.641058334990774*^9, 3.641058339112966*^9}, {3.6410583907117653`*^9, 
   3.6410583909261837`*^9}, {3.64105855959487*^9, 3.6410585700969152`*^9}, {
   3.641058603937564*^9, 3.641058633483509*^9}, {3.64105888068554*^9, 
   3.641058929708267*^9}, {3.6410589981035967`*^9, 3.641059019803043*^9}, {
   3.6410590603939447`*^9, 3.641059060578569*^9}, {3.6424049482365*^9, 
   3.64240495068609*^9}, {3.6424110019076643`*^9, 3.642411002402526*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"stringLength", "=", "100"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"postable", "=", 
   RowBox[{"Partition", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{
      "\"\</home/abe/uu/comsys/ComSys/pos.txt\>\"", ",", "\"\<table\>\""}], 
      "]"}], ",", "stringLength"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"energytable", "=", 
   RowBox[{"Import", "[", 
    RowBox[{
    "\"\</home/abe/uu/comsys/ComSys/energy.txt\>\"", ",", "\"\<table\>\""}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nIters", "=", 
   RowBox[{"Length", "[", "postable", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"GraphicsRow", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"showPhi", "[", 
      RowBox[{"postable", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", 
     RowBox[{"showPhi", "[", 
      RowBox[{"postable", "[", 
       RowBox[{"[", 
        RowBox[{"-", "1"}], "]"}], "]"}], "]"}]}], "}"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "600"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.64105558934508*^9, 3.641055596495398*^9}, {
  3.641055770263446*^9, 3.641055771546513*^9}, {3.641107516084941*^9, 
  3.641107521358205*^9}, {3.642404640656517*^9, 3.6424046468177834`*^9}, {
  3.642404922356127*^9, 3.642405010464664*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {InsetBox[
     FormBox[
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJztnQlcVlX+/xMXdkVUQE1RcUEQkEUUZFhMc8Vlchj31LGymlwCs5+VS7lW
bpPZqGlN5qRO/TV1NE0NcdzGpQSXyrSmX/lDRcMFkAKe/1duc73ce59zv/fe
cy73ofN+vfJFD/c593s+3OVztu9pPX7y7x93e+CBBzI94J/fj5ue9uyz4/7n
kTrwPz3+J+ux8bXhh061hP/u/ezgcDgcDofD4XA4HA6Hw+FwOBwODYqKirZt
25aZmTlixIjk5OTIyMiUlBT4OSsra8eOHSUlJbYtvBqpqfViDddNxoEDBwYO
HFi/fv2ePXsuWrRo/fr1+/fvP3Xq1L59++Dn+fPn9+jRA347ZMiQw4cP26rw
aqSm1os1XDcZZ8+eHTBgQMuWLVetWnXjxg3CkQUFBStXrmzevDmIc+7cuWov
vBqpqfViDddNyfvvvx8QELB48WL8q7+4uBieXfCtTZs2VWPh1QjTetVgh1ZT
rwfDlJeXT58+vV27dsYeMqdPnw4JCXnppZcqKiosLrwaYVqvGuzQaur1YBLQ
BB6wZD9ABtxCUlLSrFmzLC68GmFUrxrv0Grq9WAGcAVt27YtLCw0Wc7Vq1fb
tGmzefNmywqvRhjVq8Y7NEa6ubRph6duYGAgradobm5u48aNv/76awsKr0ZY
1OvLL7+s8Q6NhW4bNmxwddMOtgeeuhQLnDdv3tChQy0ovBphUa8OHTrUeIdG
Vze4o0NDQ728vFzatOfk5EC7g+6bGlxBs2bNjh49yrRwimXqhUW91q1bV6dO
nb1795osx26OXQpd3QTTvmDBgqZNmyKvB3ua9vT09NWrV1Mvdvny5RkZGUwL
p14sHur1EhzajBkzqNTLPo5dBi3dZN2qeq8HW5l2eCyATzZjfpyRn5/v5+fH
rvCGDRuWlpZSLxkDC9EEh0axXjZx7FIo6ibrVjWgm31M+/bt26EZy6jwsLCw
6OhoRoWDgLt372ZUOBnqokkdGq162cGxy6Clm2q3qgHdbGLaMzMzFy5ciDiw
4nbuXyckBPt5+gRFDXl577VfEN9JTExMS0vTPq4wO9XvAZFa/r1yEJ3Wc+bM
AeeGiII+1EWTOjSK9ap2xy6Dim7OulWN6WYH0z5s2LANGzZoH1fy5eyotiPX
590ouXVp++QO7SacvKP9pfj4eDAMesK5+82qjAGv5RUhTPratWvHjRunp3Bq
0BVN5tAo1qt6HbsSKro561Y1rFu1m/bU1NR9+/bhj6+4W5C78fGw+Fe+uqt9
cGRkZJcuXfCFl3y1uEfKwnO4PrOdO3f27t0bXzhF6Iomc2h061WNjl2Jed0I
3aqGdat20x4REXH69GnkweVXtvRq4VWnbmD6mkuIW9AREhISHh6ODaXs8gf9
oyf+6yayo+rIkSO6bnCK0BVN5tCc1svVHLsS87oRulXNXA/Va9rh0aRzQOru
dxuHBbd94hTCi4LmcXFxyHJLzs+Kjlt4AXNvV7Jjx45qfA9SFE3m0BD1cg3H
rsSkbuRuVTPXQ/WadrgA1q9fr+srFdc/SW7T5+BN7SOhPZicnIwrtfjMtMi4
JRfxKrz99tvV2B6kKJrMoWnWy1UcuxKTupG7VU1eD9Vo2rOyshYsWKB9XHFe
Vnj4c0dulJWX/PDJk1Fpa77/WftLCQkJqH5RoPTi4tjwyaeLUAdXMnPmzOpy
WXRFkzk0jXq5jmNXYlI3crfqfd1czbTDG7xHjx6IA8t/OvzqHzs39fGo3yp1
8ubvUe+r0NBQ7PjgzUODQhI3/1856uBK4Abfv38//niK0BVN5tDI9XIhx67E
pG7kblU13VzDtIPHbtCgQUFBAfWSL1++7Ofnx65wMPA//4x4GTOArmhSh6ZV
L1dy7Er06iZbi+Tj4xMVFaW6FklVNxcy7UOGDHnzzTepF7t06VK4upgWTr1Y
PBTrJXVoGvVyKceuClI31QQCbdu2XbNmjepaJBXdXMq0Qy2aN28OzyiKZd66
dSswMPDEiRNMC6dYpl4o1kt0aNr1cinHroqmboQEAjLTLq5FSk9Pb9SokUw3
lzPt8DyBpw3FAqGFO3z4cAsKr0bM1EvqspKSkmrXrp2YmBgZGQktaIorvqvX
sTuDoBs5gYBqtyrczr169fLw8Ki6Fsn1TPv58+ebNGmSm5tLpTR4IoGSFy9e
tKDwasRYvVRdVlpaGlxg8CH4UoorvqvdsauiqhsmxZNqt6pwPfzzn/+sshbJ
NU07PEagFlevXjVZzpUrV1q0aPHxxx9bVng1oqteBJcFlxC8Cv/xj38I/0tl
xbcdHLszlLphUjwpu1Wl10OVtUgua9rhUQC1uHbtmuESvv32W2g4QyHKpDrg
HsFumSk8Pz8/Li4O2uOGS2ABUjSCyxLqFR4eLnNoJld828SxO0OqGzLFk6xb
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
S6zKOniLtRozZozJfGKEtUgWa8V0/wi4TQYNGsQudz3r4GWLZ1mfLi8vj11i
1RqmVWlpKXktEhnyWiSLtXIw3j+Cde56i/enYH06polVa5hWDuJaJGcoU2Op
YrFWFtwm7CyWxftTWHA681lbnbmsmqeVw/laJCWE1FhKrN/3hOltwjp3vcX7
U7A+neaKbzJkl1XDtBLBp3jCr0WyWCvWtwlTi2Xx/hTWnI6Ry6qRWokgUzwh
sX7fE9ZbPLCzWA7L96ew5nSMXFaN1IoR1gdP5TaJiYkZM2aMahpw+LdVq1Zm
LBYhd73F+1Ow1kpMmW7YZRGSyddUrQxjH61MtkTWrFnj6enp7u5OyGEuHPDE
E0/otViY3PXm96fAJ86yQCtpynRdLguTTL4Ga6ULu2klYKAlcvz48fbt27u5
uT311FOaOczhhgJJPTw84Iqinrve8P4UxhJnsdZKb8p0XcnkuVa21cqhsyUy
cuRICC86OvrMmTPI8ouLi59++ml4vHh7e1PPXa93fwqTibMs0AqZMt1AMnmu
lW21EsC0ROB15uvr++GHHxooH5xJmzZtQGoWueuR+1Po6qwmYIFWhJTpJpPJ
c63wWKyVAKElAieCBiyj9PJUEqQT9qcw0FmtCdcKD9fKPEzTy1ucu541XCs8
XCskTNPLW5y7njVcKzxcKzxMU6ZbnI+dNVwrPFwrJExTplucj501XCs8XCs8
TFOmW5yPnTVcKzxcKyRM04D7+flZmWOcNVwrPFwrPDrTgOsjLCwsOjqaUeFa
CdLpw7XCw7XCg08DXnE7d+WYuKY+nv7t+r60t6AM8ZXExMS0tDRM4aWXlkV6
6csBpZEgnQFcKzxcKzzoNODFZ1+IiXn5UH7xnW+3TmjXcWouYkVyfHx8SkoK
ovDy/I9S2/8++yfEoSLUE6RrwrXCw7XCg00DXvLl7KjwzDx9qQAiIyNx+ZML
Dw4NfWjLFVQ+7v9CPUG6JlwrPFwrPNg04DcPpbfu9PyU/u0begdE/HHZyVuY
eoWEhISHh2sfV5Q7pX1QTHJ4kI9fcMJjb5+9ozIvUIEyxzhruFZ4uFZ40GnA
cx4OCOy/4t9XS0qu5EyPjHnlq7vaX4I/RFxcnI5oKn7+6Yul3eJRhStzjLOG
a4WHa4UHmwa86PMnI9O2X6t8kFzfnRLS7yBiOzPw7cnJyfoCurEvNaQvpnBl
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
h8PhcDgcDofD4XA4HA6Hw+HUAP4/Iq9E7A==
         "], {{0, 300}, {300, 0}}, {0, 
         255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> False],
        Selectable->False],
       BaseStyle->"ImageGraphics",
       ImageSizeRaw->{300, 300},
       PlotRange->{{0, 300}, {0, 300}}],
      TraditionalForm], {192., -189.}, {Center, Center}, {360., 360.}], 
    InsetBox[
     FormBox[
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1: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
         "], {{0, 300}, {300, 
         0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> False],
        Selectable->False],
       BaseStyle->"ImageGraphics",
       ImageSizeRaw->{300, 300},
       PlotRange->{{0, 300}, {0, 300}}],
      TraditionalForm], {576., -189.}, {Center, Center}, {360., 360.}]}, {}},
  ContentSelectable->True,
  ImageSize->600,
  PlotRangePadding->{6, 5}]], "Output",
 CellChangeTimes->{{3.6424049597826567`*^9, 3.642405012142088*^9}, 
   3.642405074662251*^9, 3.642407387126009*^9, 3.642410938974242*^9, 
   3.642410979444436*^9, {3.642411428596583*^9, 3.642411457191486*^9}, 
   3.6424115174213753`*^9, 3.642411729327258*^9, 3.642412070624312*^9, 
   3.6431077015305347`*^9, 3.643108442457252*^9, 3.643108621563767*^9, 
   3.6431087121015387`*^9, 3.643109836603025*^9, 3.6431108798122463`*^9, 
   3.643111604730496*^9, 3.64311198437074*^9, 3.643112694346635*^9, 
   3.643450825469276*^9, 
   3.643450962453638*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzs/Xe0FcUW9gvvAwgoCHrM2ePxYEIxJ8xZDIAICKKCmBVRQCSIgCgKiAQR
BZFoIKigomQEySgqkiRLznHn+Nz6Vdfs1YsT3vcb3193jLvH0M1eq7u6aoZn
PnNW6PuatHrmyWZNWj3btMmZd7Zo8tIzzzZteeYdzVu4j0r/LSOj1EMZGX+7
5swM/q2MDPtf6qch/0t+8v99wAen+l8VVFxcrIMHD2rLli3666+/tGbNGq1c
uVJr167Vxo0btWPHDuXk5KikpCTjmMQ9Bw4ciO9ZvXp12j07d+6M77nK31OR
fys/P1979uzRpk2btG7dOq1atcrfu379em3evNl/V1BQwLV/T9yWl5en3bt3
/9fb9u7dq8LCQq69KvSQ27Kzs7V9+3Zt2LDB9+zPP//0o+PvrVu3KjMzM21U
3JOVlaVt27b5a7g2eQ+f2z1eknUiSZ7sf1X2z0Mav/76q4YPH6527drp2Wef
VcOGDVWrVi099thjevHFF/XWW29p3LhxWrJkiW/TScXdnWqDYS1atEhDhgzx
bTzzzDNq0KCBateurcaNG6t58+Z65513fBtLly6N27jMt3GUioqKvEjQyLRp
0/T++++rZcuWatq0qerWrat69erpySef1CuvvKJ+/fppxowZXqT79+9Hs5VC
M0gUqSOCyZMnq0+fPmrRooVv5sEHH1T9+vX11FNPqXXr1vrwww81a9YsrxUM
wzVzWRhRbm6ut5PFixfrq6++0htvvKFmzZrp0UcfVc2aNdWoUSM9//zzat++
vT7//HP99ttv3oac/cRSoQ0U/fvvv2v06NHq1KmTXnjhBT3yyCO+DX7Txuuv
v66RI0f66zAWd1+kqdqRpk70v47x7TGsESNGeOneddddvr1hw4ZpwoQJmj9/
vpcsQ/rmm2/80NEeWqSf3333nW8fqVdItLl8+XKvtSeeeEJ33HGH1xRtTpw4
UQsWLPAa/+mnnzR27Fi99957vk20Sps8Fzk5+8+o5ts81vsZPjF37lz16NFD
Dz/8sBd9x44dNWrUKE2fPt1bG9aCpr/44gsvA9rkWvr9888/a9++fbR1RGgW
A6FZuvL2229740KbXbp00ZgxY3yzqOGXX37RlClTvFowRBM1RkOzaNo5Q7Ug
Abwb+0fLGMV9993njaV///769ttvNXv2bC1btkzz5s3T999/7yWVlD6PwYCc
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
KVS7rql+y0zdR+2FcOdIW1jRUs4xns2aMeQ1Nbr9Kl1y8aW6psZT6jN5mfY4
inSbWaND/6x9mzX28wG6yYmg7tMDtb1QlUwOWb/qhftu0h2d3lfD86vq0dcb
qMpFDXXJP6/WfU+P0w5nedZUtqMoLz9fX+XLH6XSZSpqyMgxDroLDws9JMfA
3W655ZaMUhQ4XO4Hx4Dx5OflqjD3gLasWa4lfyzRn+u2andWvuY4HKQIh9GR
KTGTxzRCYd5+bV2/UotdUPJV2+Gj9ELLNrrOmdJRRx3lYxxkw7l4mH6ItAQx
4a/z0q2XJiitTZ06NWW9JSWRBe/YrI0bNmjTtt06kFecFgVIZS2cJu8rzN2r
TX+t9zPD69dv0Jbte5SfUDKQQMkOcmgGgzmb/aXacsQva592btmoDRs3a/te
xxCiYBi3VbVq1TiQJj3vwJ7t2rA+9OGvzdrn2LojFzHjByfIIDEY6wPXUqwY
OHBgPJtdUlygTNfWpg1/acOmbdqbk0YLCKDYo8u2U7cUHtTWjX+F4bv/NmxL
8lSwAiJC9n2p2VlJnjaP76MnLj9FVzVqpBvuvFvnnH29rrq7h6Yu3g7tCnXb
iA4f2LhAPeo+oLenOJKzdZlGvPWUajX0GXdsuru/0TVn/UOvzt2qNStXa8/G
sbr2rOt0yanVdPUlj2hRZsp0i53A+vfrpVNPOUXlK5ysgWMnK7OoJIqfR3vG
BrqB+uiN8AwDwBQZyXHHHecnH5gJgQ2CuyykoKxBlMKZS/kp0MrejFlmA2Cw
mIrpL4pEBNN//OMfHg1Z+MScAYtVwCVYI/OxlYIEaJugzTNJFrBBFoowfez0
ek7Susv4bIbUEoR33MnqyiQ8VGL//ve/+3orhXSrK/PdQw895FNA97nZB1XI
Y4891i8ysQI3k/PHHHOMr7u6z63Azbqcs88+m5biIiaEmSGRlbv0yTqCY1Jq
pCMABKVW6whZFoBOnHC3x+ZSsEOT3u+ku/95uVq/3UXPPfG4Lj/jcl38z3s0
bPpS7S9MmotzyOxdWvp1Rz1002WqesEluqVBa/Wfvkl5JSlz2faFqp1xov5x
490648x/6IzTTlC50mVVtnQ5HXXsZfp2tzJusSbJDYe+pw5vfKAxP6/WT2N7
qOG9jTTg21+IC5HZVPBlQxIy5naQaOHe2apfvb7m7i3wqSkrCEnQnAs783CK
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
wScb5yK3aO4ZKQf1e//H9Gj3iVqwaLZG9HhRj744nNAlybVbZ+eIZSDhtGNa
PfZxVX92jBa7Sa1cuVp/bA7oZrfCaZaGaLBoLKDOhFx6kgQ4VHl45ST17/G2
uoyaqe8n9FHLlx2QnrY6bu9J1lHGknzrGZ3c+KV6v/OGOn00U78yklXrtPvw
cYQn7vAJWTj1wkZCsI75YlNAYodSqrZ/2UoNOw3XrB9/0qyPm+rm6r204XSy
wwfrsMMocV+mDs5/QTfVGqKZPy0NuLxydXKLHjvgknOtbrBJkJPdvVzjOz+u
W6+5VJddfrFKXV1Fz/X+Rn/sD4LDbNVjIrDh11G6udzlKlqilOq//B7bhCMJ
ObFRH7RtqIqXlNKdTT7Q938cZhOGSUjmoYWqXDKvyl1+her1+03HMv8hIWgH
3j2OgOi0knp4rUZ3aqJ6tWrr6dZ9NXldssmLg79EjJWq3auH66n7wq0DVarW
0vNvDNCWGCGJk0D2HDNiTLE1dCkRKyHc6+eN0nsvNVDd+o311idztOFAapL5
pH7OEGAk3cfWatLgN/RQNT+GGs8EhwwdSU8gQUA5WbGhQ4dGYyD3YoyKFlJc
vDZ74Bt6vPYDqvPk6/ps2RE2Z8ZlAufDbkG7JX3vdDWvd7/uvce/vlYrrT4R
3ULCAijOCdqROGSe0NrR3fRs+dJ68M3+mrl4pBrVul6lyz6pz+dswLdnq2qS
T7h86rC2rFiuDbsP67elc/Vk7ep6pNFguiQUiQa+Q78uXqgFDt4CcX9csYl0
frXoKWk6vGOLNm7apnd79dEn7zVUs+faauSstdgXOxH3jEMPB3b9ocVu0Dxl
weJf9bvzDyfSz2SrZjqQeUrbVy3Xul1Hdcddd2rt+JdV6e6u+uN0FkkLz/XE
uWJXMzMzLbFgne04Qh/bQbbTEgt8R7IBM3b06FHjFXl/eE++0TIcJLxIZRAV
uM8tw0HWDTF1uhllOEh0s7RDLjIjI8MGQnaTehmqEEk0xXt98x1JEdyhc6ER
69L2aHKfDrr3omvVqGVnjZ/wgereU0ElipRX768X6VB6nHWZOrZjuQY+U0ev
fvSVpn37lfp3bqUX3hitHakqHF2WrkM/vKUrihZUqQoVVCh3HpWq/Io+nPs3
jjl6WsYRLR/3oTq83kH9xkzRlM+766Wmb2ncDxtgYaHI1DhQcOgPfd31YV14
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
XtOxLRP1Wv1WGrZyZxD4OMWPxM2qa0nislYTpCvTjmr7msWaP2sxnXSiBiZo
DF7QQVoTN6ACO4xI3IQihx04pL+WjtfnY2Zo5+lwLzdDYzhESpG4ZZ7W9hVf
qnmtauo4Y40WTBuuTg54P96kj374daaG9+mlTr0ma0+a/CJiCFZTdi3V5E/7
ORL2UL8RM7T+aEaOs0sju26MiCd3L9ZLFW9Uh+Gf6UNn9QaNmaVV+1IDrP4/
SWPKoTXqW72CHuzQW//u3U/DJy/ShsNp8eNJSIiRY8wqjYDLZCN3QN8P66mW
L7yobgM/0gf9hmnConVmov+7NB7Vsk8665UnHtNLnXqp74BRmr5siw6nZCaw
fo4oS/o/SuOp9er6UE29/tGH6t+7h/49aJx+3pWSRJCzS+MOffloZd3zWld1
79ZT/T6dquVZCIk0Yvzi0hicWOYMW8apvZrf7xU16PSNXm7eghUOX41UMAiW
cEuEfuBhVqdsrxsokNVXO8bQfXeupwwpNJZkQDUErQRJ2Edi3fnz52cPFuFC
9+9//KksBYLWbL/Pflulz79YNZu9obavt9BT9e53Zvpuvfjq82r40JN6870x
2pVqQugokL5Pc3q1UPOOndXNYbMub7dQ26HLMU4eBiT5WF8HHxEw7eif+urZ
29RkyhYdPXlIGxZ/pcGfzktSZ5aXAVv42ERHqTPKOO1iqW4PquGAjToVaGB4
PYlHMixZfSweIkmGXFSwedoQ9/xuGrlyrw5vX6qpY7/WDyv+Irax11NLQgIy
cSuvdxH/wsHq3rmrRv64P3ZmW+hjqSLM6mPhFSckJaKBg5rXvp6e/ORH7T5x
SgfXTlC3HpO1MzXZx6I5ToGjmNwhcG0eVEd3dfyFjQo267P5WNwCLnrYx0M0
5Yseuv366rr7vpra8OcWL2a5o7MGyY75ZixUkWUPzrnOGfhP0li+cv1cLyoE
DJh57uAfdWf+zuAWkBs1qYniibBS1J/55OtoC7ho5YgWT2yjArlyu4D8fF1z
6UXKlSunihUrqtIXnK9SV9+tXiPn6FRmXOQOacnEr7Xo72M6eGi/Zo96VXfd
3ka/n/yHyJFVInqLRxmZ6Se1a8EAtXqlmZo2eU7PNn5J7T75NckVnzXK8N2+
NkxvoZsq1taT7Clo0kzv9BlDv7Z4lAFmiUcZqDARV5L0ycXzu1Zq8tDOak5A
+MwTeqZNP01fuSvuihF8qu2Sb3WGf+dMfdD+GYf+HtMzjKRpe011EPjYP6MM
N5n/HmUoQ0d/+0qd3yScbaznnnhUT3ebm6SDZ40y2Be6uqturVhTDZ56Ntxk
0axn0qlsdspCPMpIP7ZG159XIOi3W8khwPMKF1L5O57QppOZviw3PL8Of4rx
JgdI4o6Qmkzi0aNHrTGGta2iHBLDh50ESuNpDhw4YOeEsaZIwInnJR/J6h8+
kQS1cxGXeYuLb9/wxxrVqX6t8ubMqZLnF9H1V5VW9nPOUc4cOZQrew4VvOAa
vfr+F2CB+7wxID8H+Gra8A6VKXWNFuw4nFUOrU1lnOzk7zJcpLpq3hSNc2Of
OOMnrc/iOxiwpVUS92Xo+J4VmhjsWXH/Ro7RN7OXEJpG92Fmcfw0ZDDWY34Z
pqLnu2c52LF/y29a8O14jf1qir5f/qcOhN43ehZbbi2hEulQyj6t+3W2vvzc
j+GLSfpt656kxt34KipjHD/+kU0ZPXp0VOJyJv2oNi+Zra/HfKEvJ8zSip2n
2cZrr8fNYYKJA6PCmhMb9d24URo5wr/eoas9qUnn0eFh6aJqQkcb7O9G+8sD
qo3SxO9+JJjyOdlwF6RfR81mPars+BHTPOSEv4kZ7DhZ1tOoTSA1iDcmY8rf
vpqtjL8Nm/n5yOFOX8rq4oLn6oKy5VT73koqXzC78ubLp0JFCun6ux/U53OW
cbqeide3Ez5W8QK5VbrkBbrw6ls1fuacZPEK14/JZKApbnCWEeeFmB6a4ln2
1zLifIfC+soCYxDVYRy+RD2KpeYBIjyCMyfc55aaB9ewGJnI2+WMejlBffdU
G4ilXHkK1oeUqw3EGr+QU3VYZZEnFvQNtvC831G9m9bTo9XvDtIORLuV7mqo
1/t9pqcbNQ5o7h5xSXDbuUEAeuDvZc6GvahLL7pApQoWUeHiJXT1xe7/z82j
nM635MmbRxeUKa+3Bn6pvc7ZGqGX/DhHRc/NrxuvuUTFS1+pmctWZiW07ZMl
IHW6ZfPDjkBoLCTCwHmjNj++w+b4kpf4GggVi8ScRmiWjVhTYNV37ty5RmgM
Gy4g6xoIrPNbE+JrIOgXvouvnL5FA2Et0EdFDGShpxh5FniCx97x90b9Pr6z
nqrxsJp1GaRRX0/S5G/na/Pew/ph4aLgsRx8laB2pk4e3KjR3VvomvOK6qLL
b1GPYSM1eeJ4vfrqS8p/biHlK1pSlarW0lc/rAj6fkZePG23pr7XTt2nrNSH
Qwaq5eO36PKyNbXs4Cmjui0FYj2t4URsKRBwDzak0JLqP4wbJfzxpUC7hqJO
FwHZUiBLKazCIoi2FIjLIZVD+AaNiAJjS4F8TZWB80LRUiDRHL6eKgfHUBsY
vEXfGDOwikuwvvGlQK5BXQGqa9euXeQpip/lcvxcYI6O7dKGJdM14oNB+mbF
Vh1LC88cwAQhiIC0S7zKkLLgTP6jO9do6uA39ESN57T0UGpYkLrxN73d4gld
VuJiPfpqN/1xLL26MSLTBfbfvq9mjz+kKnfepRvvqq3XPlkS4KEsjLCDzqDm
3r17bb4QHfODg2bNmwmgBiRAbL52CIJvX2qMwLYArjma0xgBL1FzFkXw3P6c
CmME+StK4yiLiy+RQ02WyB3stIFhzUAfGGUGxiUYbU7KtYEBbJF/8IAzJMYI
4BornTj38OdMsBCya81MDen9qRZs3Mcu2eAbVNzhNL/NL3/goU8d3qGNv2/A
kAc/Gemn9ffyCercqJoatf2ItsMRA4hlTu7RxpW/aNEPC/Xj0t/1VxhRGwOs
KoWkGaVGvnehFXswSOulYy2vyM9CJi6NV6VQwULig2v3799vVSlEGmBNgjOr
SmH9yqOP4JEoEzAKNOAiUKtKwbCwoudYHFWlQHk7ddx5Jxuonf2CQbTDMbkU
psAAKvBsoLCf9TAG60ayyH+Mv4CnXO4k22qTWH78e0EfvdJtmlbtOMECduB/
zz//fG6xfXsBG1OP68CuLfpr574gfVcnTuNcUe0N1Q3gyEQpWFg+hn9Dzvzh
U8EcrESDe6xEzJ6H0qANZIzswKp4+RgkYq3LXWflY3yM1IPe4+VjlGXiJ9mo
Fl0eOmh4wlvc5fHyMSaA2gGMMXbx8jHqqQBovhlhZFdgN6Yra/c8Jgm4BjbY
5nPjCraKhTxG7EZmXAlEe99cNa7XypmvvyB3sBoOlHC3tAspb6edW5U+L/ZN
ZAIrTB0WGRuSZhh5CmRsg5NVRFrXQiTLWiTH60NBw2iOdVEr6t9pBYE8k+AV
2wV5KQSBOHyGqlDag/QmTlgvGBCNAIf6FiQY3IejhkD8bWd2wHlnrcyKwl1e
wcdRa+hcUUkVQIJQmsV124cFhxkNxQq4O26FEmypYcYYMLKRBPxu5hf4yVnb
KbwKxgwissDJZHkNy9/8ppbKn5EXEZTJIT0U2PgjOJNKU6mWZKJEaEiWEZT7
rF0csyQJj5Nj6KgH6owM4yCRZ5gx19+LaWB6wBil7dL4d9rovcGTtXbPPm2e
+Z6qV2npxGgH5zYEob2bR7b2oQyF2L9IAIV5DPrAUjA1NdTWoJ1sk4AUyAk8
BU9yBBmwFBlwgmubibCoICIew3oNYoCSkt9FM9EPxBFziKgC5ZLL0AsHxprX
s4LPNi7EGasF5RBRLDN6CWADjLB/ylfLeiNYODpWFqBNDtSqioCKlHCij9bT
BFNdqFChAMRgi+Nl7VTOAQghT7ysHaFDJRgb82OLWBH/bkhFlUfBggUD5AOO
QhJIhMJhOAD85rm4Dt6PlOFCzvPssO6YqDHnRCEVgGdYwPOxQbAG04WkQQO2
xvFM95x4ubxVCHFrfCeAVbWyxwgdSJTL54l2ArBfjLAGAYSto0aNcq7Via67
BjxBvIyVgcywl6Ghf3O8YFJ4iZ6B5tLTTuvg8tHq/GwVXVm6lC4uX02tv1iq
7cfSgmQr+9dIwnnBDIPG84IpYGkxEPxD/llLjR1fFlhf9If/x6BhcEhvEAhR
rgJnvZSFoXCx4Baq6qkzZD8gREaIsHfYUQhMoEDMCyWABFTkE1Kz2w7dcJ42
NMHFo8Jw+MAlJDKpc8WJ/bdRImOgYHL16AbJdeupAyKB5zyPXCEmEzmEIjyT
Z9kz7Yg1xoF8oxeoJ+X7HHRli5xch5r75GgQcWWPd+ew/T2QGDuMAEMHHJpN
FviOOURBMU/4FDjoj377x8AgAoYBB4lJs54MvNwmi6TwTKQAZcGUxY6Ti57J
//NM2M8YIZ7t1YRvSHHW9nQYAjTAm9zYmdyJzUQoJsuoGKzgUHZnXgt49MUY
kAfsIjIAlLcT9Pz4HBGhUL6IuXyHx4bYGCBchzU4mhXz22gR/i8ogU09pdMn
jjlHd1hHjh7XqdQMHXfPATX5ynfTDjsu2BQVO4p9jG/Dwo5C6ty5cwe30xki
fgIH4Qf2JW/evMH9GIpEn7IcAeLFMDhb5qbn9Mh9xt/IoGQnheYOnkU5HyF4
8eLFA3K76NhOeYaLOC7siLMPZpqoZcC6GqSN794KMj6OMGxJxZKS53Ajs050
tkOSQRME+b1KVscG6YHlRN1YDFjnnmh3AyNQK8wlD+drJ1nWFhQhozAWs8Y/
yiEL+6lAIcbkG4zaljmwFwSmEgh7Qsoiaoed2M7GSzEd+EUnGjZZQjWCEKQY
d+QP/rC7ERKsBIAoX758gSfYsGGDMRmlp/iZQMIPy8tXwUBPcHI4GZwu40I2
GQzOiM9BQ/7IXi9a5h+suyUuDtuOaSri3ROiVqxYMeXJkyfaZoA7QsOJ6qAp
oyLLRx4UEUNDPSAKB1804BToFzCBRcILY7l4HMpMMgspRXHt7BfqYHgcCIOe
JUW8tFIhghF3gCTSAKbARBkiiUXCpJCX/wqmhmLxLHgKIfDKCBaKSuDNvVhJ
PDziiyLjyhi37UDEGKDAMB5LjTsFvcT36ufwZIPQACbmyliRfWoPeSeYketB
KBg1jCHuF56j4QcPHjQxxJYC9xAFN21TNGYL1kDGXDBvcIQcPy+EV0ANJIE8
DZ8jEcAMrBTiibWHrwBU910SJMNy40zROt6OZySc4RlooJ28j8nhXcQq9Oux
3X4sqmIiAM/OTYWnDecNQjv4gAcsUKBAoJZkMXyb7LdCocwZ4yjqBs5BGhJb
z84N7BXSQ7iC4EFd/sYOYNoRZN4Eh+AYR8iGgysUrLkhoBAHDqCIcBHcClHQ
PvSWSAAoAHedYYsfSYbecjkIIrF8F+6AhMEMC4FKgP5rAw3FuzJMXDWABcaz
ZRWh5R5cP3CCGAfBQyEYBgTjOljO99a5kN8YT+A1GVEsA88lNYa1sPYxGDpS
EEBpSMl78ZIQn5iJWMkEG+Vy19t0sc/oCmKCniR2wYcpJcQDw+wE1SIxrK6F
TDzZrAoqBUOYvZ1o6WxUcX8b5oqXQ29uIfTgFn5zC3zGtUIoJ1TxXYi4NqJS
hwi+9zaCcduixNuhYMUbLjBGTA/MRrAsT4DaEoggGI568RZVyCKRGfIC9LAB
4JcRdsIlZwHibwG1MFPEiVuKxx4HkgKswsNEu4PwO/gHwbGziR1tuaKOQfAP
/nOfoTkmS5jC+zBOGCvb6Rnfd48DhmnUxREq+V6ESe+HM1DGV/gkbfMjfeH3
DsQODAuztaThWUx3VLQNq6BUfCt2LqnZbwBFXUyKECGrPDs8hf1Y8P8Gp/2p
vYViryG6Q3Qd641vPBoNwFJZxumOONvDnSXEk9zpHFyYmssX8IEiHnYb8APf
gOOEaQTn8C0uHdhEv4hkFcPWxR7f4cCiZeeYGZTEfTnMa4SyLWZ4Q3enXQ3U
wgFhtpzcWK9U61oM6sKycSegPAFaQ9RhpyhyDS+NGsWH6VuiOmgT7dMLTwaF
kX5XnB36j42HHmyBOd9fyguxUWiF44ntPWNsaC1PAtQjmmaNsZwoOxErb2Fq
+FDANCx2TLJqEFwweJvzWi1hinTxGaOIMzPetgnNxyA4qHaBpxaBK1wwaA54
gd/xlC3elwnCeH6gHsoEKnDKaElvkCemCHsZNbFJ7E/i42inWf5g+lhvvwEl
eDASjKRACjTDTTu+Rx1DjpIxRnq+WNMLa/Lgj1i38YC38AUIgiNevP8MpoIg
y/2/Xc04ID3kdrQKyVY8eDZoCEZiRABs3A0ywWGBSnA6ROGIC9JmjgINxncy
dqQvXkMBp50GRGfG8jymHZ3yd3sy+xgH6Ir7ogWk3IEggV/AKfhYv9OgpOcc
c2WetgkMvUOuAOTuKTZ3GIo246EdvDdKYejgGt4s2pSWL+AWyounwl7CNbiF
EGObEz48V7ThD19JWgu2mXlBbxiY548NhlswJT6QtMFwFYT1eDy8Okye4zYZ
gOWbsaCgYuQaBw2f2Jpq8R33oEL4Ju4FdTKR+On+gBLC7cS+vtBDogekeP7J
o3BrpjV2udAzyFapeQ8oG52JKJ8nSsBjK8CJ1DIwbLoc2xordo4gD9Fy1xv5
uJWYC/sRrdbmCewAH8EhhJIze3zjOe+VwjZUTBBrDV2NcMgBThnSOwBoA0DX
ccgELrEBcDWOije5p1/oZc6aU2GzCPJ5INqA9DoZLBgjDDkmxoeQwZDIBIdL
2bgnkl62Zo2Kgpyi8whvS6Y/jhpAhwOyxWs7moMIBVxEZ5Y4b/CMtgyMbXG6
atO2LBgOwrHWpo3LJbNISODmYw9DqLB+AC/AGPGmG4gtUiEb2AO/HToYvrWJ
I/mI7NmLsRfQG8I6VtmLgfDEKMQKjg32YqQdCGHlQBh4p7mWqDXPzIuQMNCR
9WniOw7PAs8ZkcEFfEb+6WxEjvcdsIZH7FD5c+0abf4rqNYpEKMU1QvoTLQz
L0dQlrxj3TLNmUpzFvZF5dDkqXO1ec8RpWVaRUzIOswn2AzXz8aWaE8A58Uu
Wa7thzgMJirSgbIINfXFduYQjgb49vXXX0fllBQJL5q1iIKrqOEW3gWoAg2d
NTANRZ8AsCR3MKGkZlhJoXrKbg220R3bpV9++JWdEdYiEkuLlBBL2WjAUxhD
Kqcj8mWmaM9fm7V6VbC0a08FtqM4gAHnW+24ZqwQFguGwnMkxzo0YAVxAVJi
XtTY/7VhvTb8uUOnMqLBscqDYeSvgM+Vk/mMoOKUkvh8apMGdGyv/qNmaHei
FSbySrjizLNfMskb1FMuGPqmql5zhcpXulsP1Kmrug1f1dQVQUs6C4jwX9xK
ptQxKGLv8ZVq9WgjjVuyKd4TlKuxTaQxjKAoLkk1ji+I2Htkke4pcw+H1URk
wPvgKcn5xMoqUHLsCixF2KxjKWe3J9ibrt3rpujh2xtq6bFo2uTzkYxEh9Kw
iar16YqoxhkRo/oH2zM3nYq0A6oRhpEKcH7O4D8fo6/YcDw6xs6ejmhiRJLY
e3qrRvTqrF6DvqZi1AaH1WVw/4m9vBlZ/F+wFzXG8zrokc3SiKzBnt65TJM+
GayhI6Zo6db97Ky1J2HZSNsRjToMmxAKp7WLfYXf0Pd0X6U71azLp1q9+yhH
qpuBwOGBWlB4mzo5S9B6gi/JbLY3W4dmMmGO5WYkgTIMCJMa25YVVZ1SyDfG
DWr4p+rfvaVuvOI29Zm4WAfTEiWLZl/Jq9mocFx20tL/wG7covWScxS1mALn
jwtE1ZwltweTYwBySvHtCae0dc3P4bniw/6t5x97WI81aq/pv21FsW2c2ABg
FX8FLbyyQ5SuyeyHn7Zz4n9gP36csNuZoih+Cpbgj/+t5dNG69MvvtPybQfp
3WHV5EgMFMZbOe2I2J+yTSPaPq7b7qyqhx+trWsuKasq9V/T9xv3YPjzxV5I
3iVxxFR4zAIaQVjy39iP4GENSFc56BBtBk8/rCVTxujzkVasOVJfjJ+jfWlG
3twBKEJrSNPhyJEiZ3AiETnh0Oo15+vqGg3V4OGqurjkFWry7nD24kciQiaQ
bBIV3jZy1s0QXvzufxCR/F71Cc/s2FoAIYuFFlASzKCzJJBjnSPxD4QgSXIS
7IDpqAcr3aB76z6sO266Xjfd1UBDv/uVs9RtsKQqrAh8sr8VxjEJhBV/iGUE
9YGs3AQ6JwsRuT/G878QImJD1kEdHPc+3Pn3lF1aPOZD9f/8e23cdypoqmB+
ATSFnhJuOZWPmJB5Un9OH6D2XYfph5Vz1eyR58xHRExgDiBu58AiJpAvR3wS
q31nFx9KHXC3pA7j4pO2S1++UkVlL7lRdZu+qlat2+jNzsO0NeJ9rsBxwDjw
H8YrsTUqd7CLeWGfxnq6+0yt+m1yVkcCxMDdUshtIyYIsOPp/gexIRwmcrVk
PvDXxAaIS5jj21/E1Z91nITYsAE9VbuXTtbgHl316bQ5GtDtXXMq2WykrJ4S
UfFXuLc0cQowNIfGeFKUADoS4GO1UV9/+F2nZBkiUrDua9GBCelHtX7VCv2w
eKY6tXYu75+yRMbRxR6RLAUbc7dP1ZtteuqbJduCYwTissTgkKXFixfH670n
9mqvrkMGqk7VJzU2GWvghAh8OcXdmELMRAaQUj+jvlKc65g8W8vXzlSVLOJE
Wgl5gJkOLSQ2+mTq5J/fa9TAIfrsi2+19khGtCrz/6o70zCrijOPM4ARDYMS
0Jh5khmNThZxlKhxnmyaJ1EUgYBREEGRRBFQMURExa1lEUFEFAQBRUBUEmVX
lnHrFhQQEJpVaFmbRZC9oRvohf/Ur06959RtCTPzce4Xpe89dare5f+uVYWV
obSMAcCRAPCs+nZ4+4caeHs7PTz6FTVPRCjljF3mQJ+HTReZQoMpe6W0db7m
7m3r9J7T6lHDBvmt/E6W7GvcIXwxjAj2Bx/UGTfzljAZuGshScJfvb/J6fEp
XY9s16LJw/RUnzx16NRT/XMdE/wwMDEWIcJE4BaReXPCKE1/bYzemT1Xm/eW
eOgBsgmI8N1c/F9NhMicY9dzRWi/CvMna+Aj3XTtVS3Vb+w3RCg08mQeK9vs
P56j2fmLtcm9eM+qieriPNY3CtZmG2Bqp2f/YRKdPGQWsUL7l76hXl076qIf
XaPxC3KkidgN39AhQ8oeABgXDYcik6atenPwk+p1/5364fdypQnpIyuJ4+8U
MX2E/e4HN6jg9WEa+uqHziAdTyUGj5asGFYFp5J6rX1H4+mmGY+pxbU36tLL
cqWJpABTY/u2TdcuI8a1zaTpiL76cr6G5fXQza1a67auOdJE4E31htwSaA5/
oxifIy/2bPpcbw7q7ZiZl5fn/pbXZ5AmTJ/nPS9DJkhO7E4wbqkKhnI+U+SR
VKp08yd6te/d+sVlzdTrhRypQ7rw//hX4lXV84YCI4f7hWBXlO3QrOd76/G+
w7Vkf9aDCTEI2TCEzgg+nit9ZGZA2BzpY0vr/mItnj5UXVv9UYPGz6kufaHw
lElf1WGtmTlaed3v8ps2u/65nTo8OErz1/uDSEz68G+oaQHCzsNKa7nle7Vg
5F365UVXaez8XHuIcjFBslLGS+wcw9B3nsqRi3JKtizRjGHddPm//S5H9LCf
VApJ+Tn/wGKPqrLNmvnCg3r09bUqPZ4aJMIWMAweYRHoGzOpY4PSsQNFGnfP
b/TjS3KlDvVGStmtbzMlw4WCs685I6+T+LJ9Wj//LT155y3q0m1gLHVYYhxz
ygYYIiJ3Z0btCll/0Mq6jzS44+/0i9+2VY/+gzVk6ChNed8H72azWQDijjfK
B4RxcJFS3KHFujnP644mV6rHkFwrCXaTxo6FjaQNAgiU+XR3VZnWvTXIeZvP
aGrRYSVlx0TgcB8oSjk6VBM2UqaUoUijphHP0V1a9WmBVnyxmcjafHDgme4J
qtJOwlM581dAbtaS9992IdhwvTTm73p/ebEOxnucT/F4RVqMKWMDMu81AZyj
Xy3UjLemaPWO/f7CK5NP0na4hJj17du3W+oKY4oLQt7MabARqvLQl5o5fnJE
vETUqN6GG/fSMNe9dE/hUF1z/VP68kjKJUQNgCMhgpjgC7k5xNjI+R6718x0
lnAm+7nSLa8kc5BnpM4hjE0VzCJspQbkaJiSs+KQilct1IK5S5ASkzVbFEqG
gqBY7v12InWyo3ifipfO1oTRr+qtd+dp0+FKuxkJIUFSbT8A76T1AYMdU5s7
Oxd+MF3zlhZhilLVRjZpqqP7xI76IB+ChSCTnHyqdGj12xrct5+LAL70m15N
nJgt3KWboZqkkVVkQfiklksFe9FHso2EskihBdiIGzKOA8oUMFTOsFlKE9zC
AlCPcQ5jnELGQ8FHdCG6/RoZwDyTQ3UDx274JOdVvP5ZsUqPHdLqqT3188sd
IpUqdbWpUSEQpLxtj46LsW1kDCJyQu4mSmUjtiTE8FPdKu3ce6Qfz5FECXF7
uPLJuo+8dFUe0b7Nn2vOxHF6Y+pn2nH0eHyBOHKBe8so2BmUlwCTUgAvQ9LZ
xmrZV96E9FGDnhRNDl8MfXRCm3DodAcgm/T+yAEaMGKK1hzwp5H5D0JBWAgX
3GQfi/laO60IkcJ1Kz0nsJbQExOLneRh54bWsIoCbMdOYgNJVxAcwzBq4PG1
kIQxsN2t14o2CBg6hqBHJR5WhNqRbnVoHR9lNXfI3frznzqq4+0d1P6Wtrp7
6KfaX5ltEsUHgL/Ew6SzYSYBcLw/C3zFdQdCioqKbDJMAt8W0XbzPTssHbaY
UxqOtExtIkdW7V6Xr/EjhunVD4r99YxJrvUMTwpcMiwc7T+07mC9sHqwlVni
8vFfQg8WiykiBv1uYDdoT0WDSuDkSCcYF3anIdvpibNUOE3PPv2CJs/3hwn4
D5zDx6IR5JvstjaMcOuzlQ2pxxL748ezZmiQyn2d9AxruxrbNnCAFc5TMjrj
l0FnZMnN1OhMvMWfIYxDNPs1UI0skDVwMB1v+D62p0iLC+ZoxrQZmlOwROv3
lUe7hU/1mkJsjYThtUFSkJemTRueDhCsfThv3yaD5aEiEg60NqbjEDE/lN46
WmOjUVW6WTPGPasHnnjDn51g5WBcN7I5FBkIr2Ao/iGwwwKBHajGv9F9ZkwU
iABQ3iVYouREdsB2AzNjAnLHyRpTwt/gJkKV5Zbr+PPSl017Sc+MnqEFmw6R
L/FBPOXowsLCAOAGaYiWnXjnQu+zAymZFByAraghmI2xdsJRwwq8dqATk2XB
fJB2mrcwV/hilr9ENKh/ExU6xLGWDZJIBP/Qx4nJWUHuYB75UuQNOCFJ6N6W
fJ3cUoznQZoBa0HVB9mmWYgSDj4YCMWEyXbglcTnDYOsyImTeGvOAOjJ5hCy
W1KEiVGTIuea9r6e6U+527F6nsb0e0az136tvVs/0+i8+9T5gde0Ldw9hi7R
cIiFBcPxdXhzlJKDsmgELK4V1o0Ak5Fm8lAQ1HKsbRAeQQ2RANzxJBVXL90G
ShKgvOwrfTp9lDq1bqmWLf+gpr/5mX56eSs9O/kz7Tp8xAMds3L6kCMFWZ8q
IwFMmOyGgc1YM+SfN6CzfCguQXlSjezzt+4S5NmOS7EWL7u9AKXGJsR9V3ah
DOOEylnaL2VXTaFDlOmzfqnE1qBfEBBCoitYYTpdGgQ+ATugEetBpyAmqycz
g7QgXIAac2IcPCSIjw11AmhTxP/DLOOS0KeXtXQle1LxHMKpyVabQXwpEiOP
lBVBjTqBX2wSL9lWqGkD7tQN1zfR73/fRDd26a1xc4t1pOq41wgoxSwxYiiW
e94qd8yEhQICdgMUCyUMwTLZzVcYMGrYtnmcYVhkODJ5ahA4aIwvwVfvzJik
7RtXa8HH+TV9Y8G3lD93kb7Y/JVGvzrW62G4AysIT3w9BdOGoFg2qhzV95sB
gu7/a0Z8twP7EfRM3pK+Q9ojwu56E1FYjgVnNDSSR+pHwyG+UABKkNq0EAWR
xS1hiYgTYlQ/iLb1H/MdlOW3MIwpBV8kdLc29KSCurwfFEPkQDQCAd6NKGEu
6MXFmoCEQD1MpM5Cazo0ZAw3ltXdcbTwY03KcSviI2uRXh6LKrvwGz7ScIAg
I/TJI3WV+JpHdXhPsYpWr9DyFav1ZfEuH7cVOi+L3B/eBvieXolTy0/cClTW
90iPJSxFGvk5Ln24DSVt5seJxJryvCPC9DALuM7PkUIEGaPLT+3eU+jLUKCu
k8aQqIs3VUElUqIsn0Me7IJ6KIpqoY1AOz4qUI5yY8KYCNzEOSYTlfWT1vNv
5zfMiu/IXAHQ1kkHEGAKASIkCRo798Z6r2EsNptwwTHXAi9G5YnQUuVJmJCn
vscH4IQ3MnIwAb6LiDcC5swW08xqgV82RZHyQ2Oz66jqpnKMamAfgFobjw//
tkDEUdDAAcNLfI+mESvRJUHWFvWpF5YAu7BSEIKsSFymRAogNnGNE/UzI+HA
MUJAiCCgtx2FXjOs3q4oqs4jBAZaI3Bh14pfAdPEZWNcwIGxrNWSldLnE7be
JjKanMED9DA0GmTNktgTF8NZ2h/xxU9GOuz2b5NVsAPZBAdgLaYOH5wWfBwI
EA3zHQ5UyZHVU9MjWqz9A0NDAjDb6lU/Z78YMbH1GOGqEN5g9dEEfgNnkQa7
SA6jSyRgEsXviBrY5UEMzRggEZEJTiUSYv1DxN50DRBMQndy/1gva63CsvF+
yq+4TCFsje91ZtHYVwCPwAVCZg2yZ6VtU4AuhGMKsI7pQArEgliPZaMgIB0K
gbRhi/mOZQKQiArdZ/EuOqaEqEAuwB/LmolYdgUKjHXiE3MF/YGyZFDZzQEf
sypZ0rJNmI8eIvgMj47FF4nZFXCYIqjE9NOtN8lVe6gqK0f1yKXwN+vrYrYW
2uJInozp/AYBBxJCF5OXaos6zOUA9JhuKJPVDpaMmbIiiM8rGAYkYGgQhjYt
C5PAV5CK30AV3MrQDF7j5vAbXy0o2aZlk/J085WX6pIrmqjr4Ckq3F+RnpPF
UmEAWIATR/MElhDKu/FCFThukedbcBBCGMsBojpBnNBD3BEwjjIwe5pABCSX
Z0EBiAquIr38l2do9sQ3Q3NIZOJ4sXq8JBNVHGVEkjPgwWO6FWlsszHhvW06
ZAUEtjxj2044MQz3EM2iUIEsxdvhiBzJhNHqCJa4cWwnMMNiAjG+TI2YFEZl
Owi+l2aBCJ4IvJAHXAc0CvfSGpoxHbgWRJMoNVjOdFkC00AusFSILJ44qGgy
ZN4X84HxaF+Q2TQSAKyQTdhDdJnN8VtpQyzPQWb8EkdC65e16x8RXWIpOGcX
HZ4RhmCauDlwgowGy3McTIb4vn8DjGTWCAlMNPHkA2Hp+ofR4AarwFX4R8IR
M5LXYtbZr4hT4gIvUyoWjTcVfMD4VkZoDZoxG2p54WdpkzBvxK2EP3yH20Ns
ml28XceXvzYtnKqezZupVbdHdOetLXVfl256bOh8TrrxOud3bYTuG1MHlBpl
RS4wopgkwBz3CTViRbiguOWoDW4xJTwMBIgLj/gtPA7XZaXzhqKsjWdoYOas
EkSXgyvtN8gTyM44jMn7oGo2zlmpAeS3fE9WEKOD+mJGoTTFDNsph0yTyQAf
UUO4Ae3AQlQvO1fjXz394yZsxmV88BFdILoDX5EK/k2aAOjgd2AnsIGeIZBg
K78hurCrwPjY1SmsHRq672oGz4DXIxmgBHaYZgLcIz6wBWuAOgdfJT6gApS2
s3KyjV0NPNWhIPALxQE4pIYKEpKDEQJcbD8h1AemsR64RXYrfHaKSAO/AmSc
5wkHqAzY1gPbFIkDA3eQGgAMY4ZtBm1wqW1Hd82gplg1qIgaA+vhnfHVqGAu
XjTDwEAAgyO/zGMDRACoUCCpExkq6I+zRwaBmQCtzJh/s9uxpm9POM2DA641
aECnFpqPd4fBCTys0S7yBD+ZW6BGzty3bX+reva4Txf/9Hy17HC31pdWrk80
KzGB30lZi3HHEGAm6RwAlkBfaI504qoCCiwULYHlISLPqj4NUkWFVFhfSIeX
B014HI8QFiDIsARwRlHZCM/BCURksDDzzuqnimW7K2wHAsKP141LhocHUeyw
GIwBYAEoAepJ0qthKnYoPGKANw7BURaMBEjMv1FWFBEA4/fAJv4R4wckz5yO
U9KTr4gNKM8QbNWK+AyFQXMoR1IC/QdH+G/Wr5oEtAQDYKzdKJiQ4Yw07IdU
kA0bCunAAfCFCjcODl4iUgsZwQy0zg4Cia/9QxxxduGsXQ2O2UaEwQxwFkzF
mjD/dK9iIvUs007aQyQRHl5lvpVtLIWKOMbYQKhH6cz2IZEcZNqAgJtq7G9D
UfQfD5IZkdvloJmaAI37DXENSIgHCUNAXdPdW4MmMHPwhBUePlyivesLNKDz
lfrlNTeoYNnKoAmWD0U8SfEz8XR36j97UgGbJKT5GmBBVe2iY0AEiQH/7N5Y
yzUhfSgMbHHwfFH4s20WZ21ueMvPoBPADH+2A5KMUsgrb2UWbknxaUX4QRAa
8QctbAu7XYjIvxoHylZboyc86RgCq9OCvKIi2AFU1m4iQS5BSBZC900cdeD7
8C5HbdtBCUgCuoiRG+6uwA/wleB+2ttjNO/vj6rxWfX0nfN/rV+37a7xEyYE
fsQ7WKkEoFN2lpQdnBXvEoVUZsN4BrXmmdxTw5JcJFYklE69pNjtoAbj+KPo
FPs7vh0gDa+LcBgvC0jDzrLu+CwR6MX5JaAicMH3SC/v4zlghk0NdhItcwEW
afS4+CTrNTqTWgWawiXhlqtHkGCLs8kBQuqmOVBIg4ojObjQoCKIqMPL1eP6
G/Xy59t0qOK4NXdCNfSJtL/xC5vw3OBnvf6UHNynnWs/UO+u1+nKa1tr3tLl
Ofyq7QfHP4cGaQXjtPT+RQwLCskHNEWP7LZoU0FMIbrEb51i/CT8GfSBwtgj
ByX1AiASs6JGeCOAoBU8QBwDMs484O0oB4ALFTiGumFYNkDKpLNrypOtqNFC
rCRhe73QF/SHWaVXWdfysyExQFKwduAFooMOUD8B+zCshCBeXMu36Y32zdX9
vSLtSXpJrMvDJAcPwHhRVVmmgtnj9f1zztGvm5L266SfnP8D3XTHfdpSVhF4
YcnmeIOnI6p1I+ImMh9CJqYPxTAXiKaVBfmO32Cu3JLtjDzLU+MdOv+qflBE
21HPy5A4bPHpp5/uaU9WBptKcQpDZv4QfVOlBw9o3/4SeuBNAhFUPEGauC+K
1sEkwzqsSwTYwhFEXeFWSIZYCxTeLjLLDhczWXCPySJicPHcc8/1E6YiatEg
Z7pvGtle1/XJ14Z92JKsRQlVwjnhzGTjie80ObRDCyb107VX/Id+/NPGuuHe
pzX7iwO0J1XjCQk7hDvsxjeewAfkgwAO2tt9uXF9nonzG3TdKeWPIurg6IRt
sFYztOYLqwXAAxdsWIinYzs0c+RAPdZvtAoPVtnJ9Th6hCb8q1E0ZeYTppyM
0NBbHFbCwNhfzB7cw1QCP6AYSUZLdlvcabEAFogIDtFzDlYaLhSPV5tmT+j9
or3+vvL4+Gs0CRmjg9FDSHLjU2ppWWu4ywkxtQYcu4QA7ITrJNCts8VKKOC5
e/yCaCQWAlEdKFoZ2BLSfEB9gAMLmR42gPxUlmjF34Yqr/dzmrbliF+ASTdr
Raf514XVJs3M3KRPC+TFMOML2H2OZmAJADAkeBpMBWlAhOE1LjoOI/6qLZox
0o3ZbnZV+5T/8M2657XPtPdopZfueJ8YoMstQiciL1zE1cZ/cFJnzVz+8sOS
r7Thi5VavmKVijbv5Gxc6wvgKew9IEy4mJ1jUtu3JJYfOaAt6zerxMxQ8iKQ
MmyyNabYAXnYUveT+MrCqqMl2r1tg9asXKGVX2zQjgOlKq8yppzqEx1Qhg/D
EDgyDF25KePoRV70pp7u85SGfbhDx45njLPqe8w4IwcJ3JQc9VJyrF+zQnPn
faoXRo5zWva0V108+tCD7xEN95lsRHTGA6Pi+0GqtG5RW8e2TtL9f+qjWev2
Z1uGkjPC0QguK/kmy2r5KAu7z85O88kry77WZ6O7q/2NLdT0uuZq/5e+Gjv/
K79eGxcJI7VC3TO97MIh9tfr5qhr0/aa/FWFQQauLXpA4d6OErbt2054o1bd
o9q28C0937ODWjW7Xi1uul29xnyo1TtLOSHWctXEYCQw7INQgj4OTtJSeOXB
FZow+Cn1HzpLxWXJvZYG0cSWJKAzTmVUwDFOpnP6Canw5qKdUMFHMezHcDbN
v7KmP/G+jg+06Xdf+/lCzS3Id9R5T397rKWu6vY3bThYbsSj+AGQc9fwiZiC
wABR5JbS+/b2rdGIzl31epELVct2aeHbT+iPt76ircdOfBNG1n5cpZKtSzSs
XSs9vqQEi5MKLSIUTl5JOYNfCly88sorOZtOP3ntJb00foa+2Femg0Vv695O
ffXGB/5iSeMMjld0VY334wA0F/ulnNHxMm2YOVrPDhiiGat9D3bKGTwEuyDt
wmqk4IYO48yJSHFrl9chhfebcMOd82FZWLIiuFy4Xmyjeuaedrrud1clIWIt
/bZ5dy3c5ds00pMk7C5rundOxCDSQmAtDaLpVW7+0OkDKpz5rFo2vT/qnsy9
FSduhyo/WKyPBndQm0Gf61BVxhg8MNxsdmUaYzCZoQ0w2p5TpaM78tW9fReN
nL6QbWhppS3aAeQ/eD+UkRzD063glQfXaOa4YRo69gNt2H/M3yQcX6EExsbc
sHXjCdZNKZatu22bx1m3TxpihzBlwLmVzUlm4ls7fUuP6LI2TLxeXMfq5K7p
zU2t9Ab3jE+JZSndu1bvvDZUj3VqqVbdJ3LhkS0BFlLDBdzSRvmKQ1r/6Sjd
e2sfzdtdkQMNgD6GwHnWKdmBW5wepmyFwOPl+7Ry/myN6XOHWrTtpYnzNtD/
a5SHc1DaPqRXUDVn5AJ3qm06HTtGL+Z10c0dumvsR0VZt3ktn/XFLqRMMGpk
R50bNU7/BjXaPzIFanh7hm+GkXXhlzHDWlBAC2MGjMNpgHJWQ6gm+3xtG/Gy
up+zjJvz1bfrLWrRrIU6PrdQB7N7ccAY4iHUKe2/dpM9vH2FpvXtqrxJa/zW
im9HM6Nmx51kMR/ANu4JSflwpFgzxw7QXTderWs6vaBZK74GUIwPEA8H3z74
x2QTnaeUHtXA1ulFcybowU63Owffuavub7d3ekhvf7zSa5MtAYtL3TjWBqOE
87XD1L/9DUrcM2IJlPAfO5qHlCx+u80BzMLFBB2sUQSnDywFipkzn2pXF6Jg
mHaOATYrUeHgcP7ECcov2qND+zZq1vB7dd1NQ7QxupWVKInSenwN5vHyEm1b
PlnPPPG8pq8+wNkP6e9RWpxMh58pN6xjC6Ob2W8n0os+1kcFi7Rp915tXfiy
bm/zV706exUibVwBhhEGOysdXKPg4exp2hbH36hDs6+qUbXl0j6XvLLuCZd7
Y8eXWG46NpiFn+sk3whOXI5gYO6N4ORiSEaRL929e/fX4c/c7Vkw9V2t2nUI
f/G2XBbgMWLIs42Lp/rLbSc/eIvufOgpJyFP67Ge3XR3n+n+NsCTXlnFDp6S
jZo4HAf7OQ3q94g6t2mqtk/4mwTtUawZlQ0XXeXYbATURXk52+5WThuhvj27
69GnBmpg7/vV8d5BemfxFs4SMW4QHEJps9vENMi1CzZSbuBtUckFyRtVW/nG
jRtPuvIeg2b7lZv3al03oYHV2vQIKYmd2Bhn6UGmZifZOKdtt3GkbK36t2yl
QfM362B5dY7gQzC+ezC6OKlCh7c6rB01WAP6D9Tw12dp8dYy7wqdSCnSA1X8
nqp1erl/XraPrvcAjXz9v/R15HaRPLa2aWMJ0s3fHZBmLPE9AltU+OHf9dLg
gXpmyMuaumC9vj7szZClLYjzgAMCPAI1/t8ZSGtrhizEcdiBi6qtGsN1slUv
S65ryils4yNgsWgPzQ7ir+UtGFPBx0m3ljtLYiiGLpKE2R2mzRV5+T1aqt2Y
+Xp/4TLbDtA+5k9tn+fD0lMidgbme9FESNKR7UTC49uP+M7CKCfpFuxhnvDT
yIWn5419K90xhOQQOVFuc38z6iHLlKVJZV9UbU4kN92odpoTtpC8BfPy+xjD
aWqWZgHGHQHqRrQh/xBuevE7jPcYbVzkuOHt+3RJszt0x30PePPqWFuNNqwI
j4lg331rtEFl0G7CUUwa5sZoY9kiAphq2QnSsuG8WtuNQhRGwoK6If/Naj7J
mUVUVh0UpylOmxBvdROyBmeSY0AlhCECB2VtkmF3TGrmIRqpEyCLfi9Cmn3h
u/x3X9RlP/wX3fDkCF3xi1/5RGYgiWXDCNYsSRFlwxiVvAZRKBYY8cB5q75b
hd/ge7sZWzYM7iHWcDA9fC3JKZNBQZrGjBljvbUsDVzC/jmCXhxNi3eGaTUI
Cm57A+0mFP6LWoYTlrNL4ZIOOjQOuQN7cHmgm9Hms4Wf6Oc/Pk//2fYBNbq4
se9NrkYbO5ODRTp30GgDJ5guGobPjL8Nt+hostVSULTtWi4UN9rYaaBYdgcp
342UE5JdcMEFfq50IMW3DIEEuM1r1qy5JJobLw5zOyvMDZXCm+Hd1Hz5CSk/
cMd6g3AtoC/FKohIrt4RtTDIaXwx5Q/CBOHSy6OHq0PTX6lxqwdUvGuPEcvK
DiAFc0Re3Xqs7GC7G1BaUiV8SGnTe8dPSUhb2YHJw01+u2PHDis78HLqzNTu
d+3adXZYBjAJDlk9Hk45dlgbM5kCUACdIZGPKjYOIzKBb8y1gU/S2tF6/Jcc
KUBDCyO5VPKo5J9xsAggqYWgvRQpbJc/jKdbdWmQWNZMjglGUCtFBVhfaDSz
rWo6slEvPuQilBtaqkmTq9Xo3LN19s/u0PydpbmEPiU9FYIaYLgYK63HIUi8
DdaGI7Y8xREiRJRnrN00Hg+8wl/jGUTF6nF23CipGLhIkSjehQFLWA1ctoMc
yDhjLrOG08QJgmJkauFwOAzGK2Tj8C7meOJ1fcevy3ZhUpMD8GyXBfDD/BB5
qIssQG2Yj4NAmB3q5wlTsisLAT4etfZHDA6+GYznvwhkemRjEsos/fg9vTMt
Ov/t3XnaWZocPpyE8jXi83DJzli1Kb6gB+8Fc2sXhUFYy7/zVnsO8claaxKk
oMGB54L0hmgp2Y+ApBOF0g2QoUhd73XyDNEOBVY+dgY9qycPgcgjAG5Ma6uB
JygLU4HX0Jv8L0u57H9cZv0TLdO/GrlCfmhIoEEP04JMwHf0mmkRgLP0wrAE
5pGc7TZcyz4YqxEPd1CbZk3V/LaH9fzMxZr5YYF/D+kT995eCTPOCrPEatDf
y0JNys+IVgDrkU7qOFSdT4meA5IRCYjLjM6IGAVFkFhWSbfJRRGDMdUwAw3h
9jfLAVB/p7qNNDvPKeF7Q08UfArqBnYFC/koyl1U2lAqrBjww//zSiIEOykb
nuOUMYYb6+f/x5UzHCtPymX1/HOgG6/fuW2V3nvuUfUaMExvznpfsybkqXPP
cVq4fq8WL13mjTqvdrx/OKZ71phFkEiLCUAe1Cqn8RkpQBXxtdBwzHd2o0fS
+IyvjrBS0AQNUt8wGQIhgqSQHLAJ/fGBJaemDUCwkVdBkFygSs7Som3NmmIx
CWlxOXkNswdDUT/bFkdaoyZW3f0GDMJq8B0bfdEJWIJe/OdJqGL3aZ2MKrak
PEOkylJtWjxFXX57qXu/CyHd3y65/Pd64NmJ2n5UoTG6ni9F4mWBg8erjmrf
9q3avvuAyioqVb7rI93d5h5NWcKFipXeF4WMTvcDL83zB0SspkjbALqS3iuc
gLxdaUtpEYNB1AsOWT4Rpcf3QPypMyB0bth4CPSfISghIHuhwzDtneE3VD6h
mW28CX0AqYuD9FhTL2rEaxy9rcPHJAGIISPqPCRHPnoFT/HeElEG31kj069O
QABmH1qd/zcE6B38gaqqcs0vmKXzGp6p8y+8XE1at9OFjS7WI3n9daSiqnVg
LIYLp5Ydq9n1cRXavWCwWl97hyYt2cL9od6ZpLHWzSIwKwlFkvOfURg8UFJ9
ZISAcNwl0ISAi6fRFDxZSE0Fkyw6b0ad4VZ2g0sypu0ex4GjpRbRZExEjP02
mGY6DbCnAB9j0p/GmLgIoRe/xqUR6ll8g80logJOMN+4Mog9ZsHOqsZbxdRT
G7PjtuFhaAO5odrymSrLZ6r/aPlM9WTL7xMYgMYOGzZU3bvepvyJw/TMwNHq
Ofw1jwBOIm8K8M5MAE7Ynzbrnaaqg0v13F9b6+LzztNv/jJBK3b6k+O8TeR6
DGrigYfJoQpneD8F2hA6kt8mpEJzAED63ihmWqshNI9bDc+IxgBaQDJySowB
IaAzxX8EFcSEANXHuMKPcWZOcyo8BtrgAfTHBSd9jzxYcyo6BJ9DS2zrasth
Kv9oOUzlRMvpF3gAOmDl33lnhipKt+nTqeP118791On+h+C18QANB78JCtxM
jAckj8sO7FDhtCf1x5ue0Hurd/pbGLHIJOmwf4EH349GYh3h4oKa3sonXWx2
UxTrAiYaRI9Edx3Ej9hWAHvklxEiAfh2sRZ5H3vOrkhgyNDmGxr5Tzq76q/q
HygI9fGRoDIFjbLt8zTyydb6wy2dtHj5CjMZ6B466I9jKd+pd/t0V/f+r2ne
xp3aMm+IbmraRVM+L/YoRCCEp+JmEKjnvbwHwxtZGPxEB7GOD/Xs7juh23a9
X5tKK+2NvAmPHBPPmo4Uf6Tnu1ytC8+pr7P//Sp1HvmJtpVUpOd6otrudyd6
I7nZonkT9aermui6ux7SnW2v1u0tmqtbn2naVa42gXoGDqHLwZo8ITiOMgkI
R8VeJ3oBtcUDm1Uw6h5de/F5+sEPL1Xz7i8qf0sZmcbkBXXTpnwAjdgI1w76
s1RzM1BgfC3Ho/hNa8Kb8PbYKknulG0PbE/ANILZjhKPRo+sC8bD7tLgX49H
3/tPu/9vf6jxT/8N5Oxw0g==\
\>"]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Maximum", " ", "difference", " ", "between", " ", "distances", " ", 
    "between", " ", "states", " ", "in", " ", "string", " ", 
    RowBox[{"(", 
     RowBox[{"should", " ", "be", " ", "near", " ", "zero"}], ")"}]}], "*)"}],
   "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Max", "[", "#", "]"}], "-", 
         RowBox[{"Min", "[", "#", "]"}]}], ")"}], "&"}], "[", 
      RowBox[{"Norm", "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"postable", "[", 
          RowBox[{"[", "k", "]"}], "]"}], "//", "Differences"}], ")"}]}], 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "1", ",", 
       RowBox[{"Length", "[", "postable", "]"}]}], "}"}]}], "]"}], "//", 
   "ListPlot"}]}]], "Input",
 CellChangeTimes->{{3.643108027362082*^9, 3.643108192168421*^9}, {
  3.643108250659891*^9, 3.643108304796591*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{1., 1.6785826017660137`}, {2., 1.6733276194942337`}, {3., 
      1.6642694588634501`}, {4., 1.6394305199708743`}, {5., 
      1.5770003066091605`}, {6., 1.2532961259422803`}, {7., 
      1.1837691209573604`}, {8., 0.9504516661997012}, {9., 
      3.051830821545154}, {10., 0.16812956028827175`}}]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0., 10.}, {0, 3.051830821545154}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.643108028660639*^9, 3.643108069450265*^9}, {
   3.643108122125758*^9, 3.64310819248009*^9}, 3.643108305714731*^9, 
   3.643108446440763*^9, 3.6431086270559*^9, 3.643108713893808*^9, 
   3.6431108809867067`*^9, 3.6431116068850527`*^9, 3.643111985461768*^9, 
   3.643450829665627*^9, 3.6434509673570967`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Rate", " ", "of", " ", "change"}], "*)"}], "\[IndentingNewLine]", 
  
  RowBox[{
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"distance", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"postable", "[", 
          RowBox[{"[", "j", "]"}], "]"}], "[", 
         RowBox[{"[", "k", "]"}], "]"}], ",", 
        RowBox[{
         RowBox[{"postable", "[", 
          RowBox[{"[", "j", "]"}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"k", "+", "1"}], "]"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"k", ",", "1", ",", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"postable", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}], "-", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", "nIters"}], "}"}]}], "]"}], "[", 
    RowBox[{"[", "50", "]"}], "]"}], "//", "ListPlot"}]}]], "Input",
 CellChangeTimes->{{3.6424116473248796`*^9, 3.642411657957747*^9}, {
  3.6424117435501757`*^9, 3.6424117530534077`*^9}, {3.642411834046556*^9, 
  3.642411861580894*^9}, {3.643108484679845*^9, 3.643108497859559*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{1., 0.017320754054024314`}, {2., 0.019080929746739247`}, {3., 
      0.021697877292491}, {4., 0.02682434144578388}, {5., 
      0.04217454853344609}, {6., 0.10299691228381541`}, {7., 
      0.1619179842049675}, {8., 0.24562912827675792`}, {9., 
      0.5465056714289431}, {10., 3.5983351527439735`}}]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{0., 10.}, {0, 1.337642783952249}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.642411736236903*^9, 3.642411753605023*^9}, {
   3.6424118347283707`*^9, 3.642411863377777*^9}, 3.642412073995701*^9, 
   3.643107706035035*^9, 3.643108471869328*^9, 3.6431086316890593`*^9, 
   3.643108719411495*^9, 3.64345083718636*^9, 3.643450972052991*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"distance", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"postable", "[", 
           RowBox[{"[", "j", "]"}], "]"}], "[", 
          RowBox[{"[", "k", "]"}], "]"}], ",", 
         RowBox[{
          RowBox[{"postable", "[", 
           RowBox[{"[", "j", "]"}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"k", "+", "1"}], "]"}], "]"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"k", ",", "1", ",", 
         RowBox[{
          RowBox[{"Length", "[", 
           RowBox[{"postable", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "-", "1"}]}], "}"}]}], 
      "]"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "Full"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", "1", ",", "nIters", ",", "1"}], "}"}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.642407504052932*^9, 3.6424076263928747`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`j$$ = 1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`j$$], 1, 10, 1}}, Typeset`size$$ = {
    360., {108., 114.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`j$42167$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`j$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`j$$, $CellContext`j$42167$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ListPlot[
        Table[
         $CellContext`distance[
          Part[
           Part[$CellContext`postable, $CellContext`j$$], $CellContext`k], 
          Part[
           Part[$CellContext`postable, $CellContext`j$$], $CellContext`k + 
           1]], {$CellContext`k, 1, Length[
            Part[$CellContext`postable, 1]] - 1}], PlotRange -> Full], 
      "Specifications" :> {{$CellContext`j$$, 1, 10, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{407., {150., 158.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.643108639516621*^9, 3.6431087243405323`*^9, 
  3.643450841649045*^9, 3.6434509744993267`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"energyplot", "=", 
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Max", "/@", "energytable"}], ",", 
      RowBox[{"Mean", "/@", "energytable"}], ",", 
      RowBox[{"Min", "/@", "energytable"}]}], "}"}], ",", 
    RowBox[{"PlotRange", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"Automatic", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "50"}], ",", "50"}], "}"}]}], "}"}]}], ",", 
    RowBox[{"Joined", "\[Rule]", "True"}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<iteration\>\"", ",", "\"\<energy\>\""}], "}"}]}], ",", 
    RowBox[{"PlotLegends", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<max\>\"", ",", "\"\<avg\>\"", ",", "\"\<min\>\""}], 
      "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6410557817363567`*^9, 3.641055843591517*^9}, {
   3.641055875487439*^9, 3.6410560563699503`*^9}, {3.641056087616211*^9, 
   3.641056095213339*^9}, {3.6410574909716787`*^9, 3.641057623802621*^9}, 
   3.6410592528359213`*^9, {3.642403908274809*^9, 3.642403921033759*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., 10.351516}, {2., 5.582921}, {3., 10.29383}, {4., 
         31.53371}, {4.256255912624462, 50.}}]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., -7.80673388118812}, {2., -8.408060207920792}, {
         3., -7.483192217821784}, {4., -3.580841613861387}, {5., 
         5.174285752475245}, {6., 5.554341277227724}, {7., 
         20.260915257425733`}, {8., 26.394431772277226`}, {8.579771647437632, 
         50.}}], 
        LineBox[{{9.287960353341125, 50.}, {10., 7.6927969603960396`}, {11., 
         16.52118845544554}, {12., 3.959110584158416}}]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[{{1., -16.668779}, {2., -16.667742}, {3., -16.665898}, {
         4., -16.661797}, {5., -16.661855}, {6., -16.645833}, {
         7., -16.645833}, {8., -16.645833}, {9., -16.645833}, {
         10., -16.645833}, {11., -16.645833}, {12., -16.645833}}]}}}, {}}, {
    DisplayFunction -> Identity, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {0, 0}}, AxesOrigin -> {0, 0}, 
     PlotRange -> {{0., 12.}, {-50, 50}}, DisplayFunction -> Identity, 
     AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
     Axes -> {True, True}, AxesLabel -> {
       FormBox["\"iteration\"", TraditionalForm], 
       FormBox["\"energy\"", TraditionalForm]}, AxesOrigin -> {0, 0}, 
     DisplayFunction :> Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], Method -> {}, 
     PlotRange -> {{0., 12.}, {-50, 50}}, PlotRangeClipping -> True, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {0, 0}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{"\"max\"", "\"avg\"", "\"min\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.231], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.231], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.231], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.231], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.231], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.231], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.368417, 0.506779, 0.709798]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.880722, 0.611041, 0.142051]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.560181, 0.691569, 0.194885]"], Appearance -> 
                    None, BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"True", ",", "True", ",", "True"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.641059253624802*^9, 3.641107504181059*^9, 
  3.6411075398239822`*^9, 3.641107671373063*^9, 3.6411087486356583`*^9, 
  3.641114568024171*^9, 3.642403647892809*^9, 3.642403821255069*^9, 
  3.642403921610197*^9, 3.64240425259083*^9, 3.642404537678396*^9, 
  3.642404861038097*^9, 3.642405020101046*^9, 3.642405084877499*^9, 
  3.642407430487941*^9, 3.64241101110854*^9, 3.642411481822022*^9, 
  3.64241156800681*^9, 3.642411879776432*^9, 3.642412082539618*^9, 
  3.643107768148004*^9, 3.643108540401807*^9, 3.6431086714068613`*^9, 
  3.643108748882208*^9, 3.643450853371366*^9, 3.643450986470545*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"animation", "=", 
   RowBox[{"ParallelTable", "[", 
    RowBox[{
     RowBox[{"showPhi", "[", 
      RowBox[{"postable", "[", 
       RowBox[{"[", "iter", "]"}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"iter", ",", "1", ",", "nIters", ",", "1"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.641056313191354*^9, 3.641056428729134*^9}, {
   3.64105655074085*^9, 3.6410565512496357`*^9}, {3.6410569462975483`*^9, 
   3.6410569919118967`*^9}, {3.64105706344059*^9, 3.641057130634218*^9}, {
   3.6410579433378963`*^9, 3.641057951695396*^9}, {3.6410580107482367`*^9, 
   3.6410580519548683`*^9}, {3.641058085173944*^9, 3.641058113033544*^9}, {
   3.641058263203374*^9, 3.6410582750478888`*^9}, {3.641058317499765*^9, 
   3.641058317760549*^9}, {3.6410583965635853`*^9, 3.641058398024808*^9}, {
   3.64105852644249*^9, 3.641058546270385*^9}, {3.6410590791460257`*^9, 
   3.641059079718616*^9}, {3.641107700658399*^9, 3.641107702288027*^9}, {
   3.64240437252596*^9, 3.642404403958577*^9}, {3.642404702701808*^9, 
   3.642404716692628*^9}, {3.642404874849948*^9, 3.642404898886633*^9}, 
   3.642405027585641*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Animate", "[", 
  RowBox[{
   RowBox[{"animation", "[", 
    RowBox[{"[", "k", "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "1", ",", 
     RowBox[{"Length", "[", "animation", "]"}], ",", "1"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.641056433052998*^9, 3.641056473199197*^9}, {
  3.641056507808794*^9, 3.6410565082180653`*^9}, {3.641058312449808*^9, 
  3.641058314299498*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`k$$ = 5, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`k$$], 1, 10, 1}}, Typeset`size$$ = {
    300., {147., 153.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`k$43127$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`k$$ = 1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`k$$, $CellContext`k$43127$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Part[$CellContext`animation, $CellContext`k$$], 
      "Specifications" :> {{$CellContext`k$$, 1, 10, 1, 
         AppearanceElements -> {
          "ProgressSlider", "PlayPauseButton", "FasterSlowerButtons", 
           "DirectionButton"}}}, 
      "Options" :> {
       ControlType -> Animator, AppearanceElements -> None, DefaultBaseStyle -> 
        "Animate", DefaultLabelStyle -> "AnimateLabel", SynchronousUpdating -> 
        True, ShrinkingDelay -> 10.}, "DefaultOptions" :> {}],
     ImageSizeCache->{347., {181., 189.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Animate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.641108808445537*^9, 3.642404413579494*^9, 
  3.64345100093314*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Export", "[", 
   RowBox[{"\"\<moving_particles.gif\>\"", ",", "animation", ",", 
    RowBox[{"ImageSize", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"60", "*", "3"}], ",", 
       RowBox[{"60", "*", "3"}]}], "}"}]}]}], "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.6410566340743227`*^9, 3.641056676452527*^9}, {
  3.641057259726947*^9, 3.641057265025906*^9}, {3.641058198158046*^9, 
  3.6410582015394697`*^9}, {3.6410591451101007`*^9, 3.641059151725699*^9}, {
  3.641108772937326*^9, 3.641108781197803*^9}}],

Cell[BoxData["\<\"moving_particles.gif\"\>"], "Output",
 CellChangeTimes->{3.641056685966839*^9, 3.641057013046555*^9, 
  3.641057185653916*^9, 3.641057274092762*^9, 3.641058226056181*^9, 
  3.641059159626593*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Export", "[", 
   RowBox[{"\"\<energy_vs_iteration.png\>\"", ",", "energyplot"}], "]"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.6410574735598373`*^9, 3.641057488218793*^9}, {
  3.6410576295355797`*^9, 3.6410576324548607`*^9}, {3.641108782987274*^9, 
  3.641108785057433*^9}}],

Cell[BoxData["\<\"energy_vs_iteration.png\"\>"], "Output",
 CellChangeTimes->{3.6410576369977837`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"2", "g"}]}], ")"}], 
    SuperscriptBox["x", "2"]}], "-", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "-", 
      RowBox[{"2", "g"}]}], ")"}], 
    SuperscriptBox["y", "2"]}], "-", 
   RowBox[{"4", "g", " ", "x", " ", "y"}]}], "//", "FullSimplify"}]], "Input",\

 CellChangeTimes->{{3.641110074871613*^9, 3.64111010767553*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "-", "y"}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{"x", "+", 
    RowBox[{"2", " ", "g", " ", "x"}], "+", "y", "-", 
    RowBox[{"2", " ", "g", " ", "y"}]}], ")"}]}]], "Output",
 CellChangeTimes->{{3.641110103948241*^9, 3.6411101080132217`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"3", "+", 
       FractionBox["1", "10"]}], ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"4", "+", 
       FractionBox["1", "5"]}], ",", 
      RowBox[{"5", "-", 
       FractionBox["1", "5"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", 
      RowBox[{"6", "-", 
       FractionBox["1", "10"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "7"}], "}"}]}], "}"}], "//", "ListPlot"}]], "Input",
 CellChangeTimes->{{3.6411105258208103`*^9, 3.6411105792060432`*^9}, {
   3.641110991596229*^9, 3.641111058329784*^9}, 3.6411148369483747`*^9}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{2., 3.}, {3.1, 4.}, {4.2, 4.8}, {5., 5.9}, {6., 
      7.}}]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1.9375, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{2., 6.}, {0, 7.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.641110546728557*^9, 3.6411105798383093`*^9}, {
   3.6411110076587057`*^9, 3.641111058871085*^9}, 3.641114837539793*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"phi", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"3", "+", 
       FractionBox["1", "10"]}], ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"4", "+", 
       FractionBox["1", "5"]}], ",", 
      RowBox[{"5", "-", 
       FractionBox["1", "5"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", 
      RowBox[{"6", "-", 
       FractionBox["1", "10"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "7"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.641110793753723*^9, 3.641110794561707*^9}, 
   3.641111067117848*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["31", "10"], ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["21", "5"], ",", 
     FractionBox["24", "5"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", 
     FractionBox["59", "10"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "7"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6411107952905607`*^9, 3.641111068208111*^9, 
  3.6411162307328997`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"alphaApprox", "=", 
  RowBox[{"Flatten", "[", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"phi", "[", 
             RowBox[{"[", 
              RowBox[{"i", "+", "1"}], "]"}], "]"}], "-", 
            RowBox[{"phi", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "1"}], "]"}], "]"}]}], ")"}], ".", 
          RowBox[{"phi", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], ")"}], "/", 
        RowBox[{"(", 
         SuperscriptBox[
          RowBox[{"Norm", "[", 
           RowBox[{
            RowBox[{"phi", "[", 
             RowBox[{"[", 
              RowBox[{"i", "+", "1"}], "]"}], "]"}], "-", 
            RowBox[{"phi", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "1"}], "]"}], "]"}]}], "]"}], "2"], ")"}]}], 
       ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "2", ",", 
         RowBox[{
          RowBox[{"Length", "[", "phi", "]"}], "-", "1"}]}], "}"}]}], "]"}], 
     ",", "0"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.641116196819729*^9, 3.641116333548255*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   FractionBox["701", "404"], ",", 
   FractionBox["45", "19"], ",", 
   FractionBox["1099", "404"], ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.641116311013748*^9, 3.641116334729746*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6411164116895037`*^9, 3.6411164223374577`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"alphaApprox", "[", 
      RowBox[{"[", "k", "]"}], "]"}], ",", "1", ",", 
     RowBox[{"-", 
      RowBox[{"alphaApprox", "[", 
       RowBox[{"[", "k", "]"}], "]"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "1", ",", 
     RowBox[{"Length", "[", "phi", "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6411163725985727`*^9, 3.641116438417179*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["701", "404"], ",", "1", ",", 
     RowBox[{"-", 
      FractionBox["701", "404"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["45", "19"], ",", "1", ",", 
     RowBox[{"-", 
      FractionBox["45", "19"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox["1099", "404"], ",", "1", ",", 
     RowBox[{"-", 
      FractionBox["1099", "404"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.641116403958469*^9, {3.641116434354796*^9, 3.6411164392740803`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       FractionBox[
        RowBox[{"701", "x"}], "404"], ",", "1", ",", 
       RowBox[{"-", 
        FractionBox[
         RowBox[{"701", "x"}], "404"]}], ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       FractionBox[
        RowBox[{"45", "x"}], "19"], ",", "1", ",", 
       RowBox[{"-", 
        FractionBox[
         RowBox[{"45", "x"}], "19"]}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", 
       FractionBox[
        RowBox[{"1099", "x"}], "404"], ",", "1", ",", 
       RowBox[{"-", 
        FractionBox[
         RowBox[{"1099", "x"}], "404"]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.641116161694384*^9, 3.641116190295753*^9}, {
  3.641116344549058*^9, 3.641116359217854*^9}, {3.641116515833622*^9, 
  3.641116533679605*^9}, {3.641116571650711*^9, 3.6411165818887672`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6411170326009493`*^9, 3.641117033896359*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "=", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "+", "x"}], ",", "2", ",", 
        RowBox[{"1", "-", "x"}], ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"1", "+", "x"}], ",", "2", ",", 
        RowBox[{"1", "-", "x"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", 
        RowBox[{"1", "+", "x"}], ",", "2", ",", 
        RowBox[{"1", "-", "x"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "2"}], "}"}]}], 
     "}"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6411106038365088`*^9, 3.641110696394281*^9}, {
  3.641116483309939*^9, 3.641116503581114*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Inverse", "[", "m", "]"}], "/.", 
      RowBox[{"{", 
       RowBox[{"x", "\[Rule]", "0"}], "}"}]}], ")"}], ")"}], "*", 
   RowBox[{"Transpose", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"4", ",", 
        RowBox[{"3", "/", "2"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"5", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"7", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"8", ",", "3"}], "}"}]}], "}"}], "]"}]}], ")"}]], "Input",
 CellChangeTimes->{{3.6411106985983*^9, 3.6411107757832127`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "5", ",", "7", ",", "8"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", 
      FractionBox["3", "2"], ",", "2", ",", "2", ",", "3"}], "}"}]}], "}"}], 
  " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["3", "4"]}], ",", 
      FractionBox["3", "2"], ",", 
      RowBox[{"-", "1"}], ",", 
      FractionBox["1", "2"], ",", 
      RowBox[{"-", 
       FractionBox["1", "4"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      FractionBox["1", "2"], ",", 
      RowBox[{"-", "1"}], ",", "2", ",", 
      RowBox[{"-", "1"}], ",", 
      FractionBox["1", "2"]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", 
       FractionBox["1", "4"]}], ",", 
      FractionBox["1", "2"], ",", 
      RowBox[{"-", "1"}], ",", 
      FractionBox["3", "2"], ",", 
      RowBox[{"-", 
       FractionBox["3", "4"]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "1"}], "}"}]}], 
   "}"}]}]], "Output",
 CellChangeTimes->{{3.6411107021143227`*^9, 3.641110776522526*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"A", "=", 
   RowBox[{"(", 
    RowBox[{"(", 
     RowBox[{"Inverse", "[", "m", "]"}], ")"}], ")"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.641110784230377*^9, 3.641110791315465*^9}, {
  3.641110845084703*^9, 3.641110892400776*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"ListLinePlot", "[", 
    RowBox[{"A", ".", "phi"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.64111079710183*^9, 3.6411108371167927`*^9}, {
  3.641110895086686*^9, 3.6411109168956823`*^9}, {3.6411109515971413`*^9, 
  3.641110966279766*^9}, {3.641111083430003*^9, 3.641111104011135*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       LineBox[{{2., 3.}, {1.1, 1.}, {3.1, 3.8}, {1.9, 2.1}, {6., 7.}}]}}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{1.0234375000000002`, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{},
    PlotRange->{{1.1, 6.}, {0, 7.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       LineBox[{{2., 3.}, {1.71, 1.55}, {3.22, 4.1}, {3.17, 3.25}, {6., 
        7.}}]}}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{1.64296875, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{},
    PlotRange->{{1.71, 6.}, {0, 7.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       LineBox[{{2., 3.}, {2.5, 2.34}, {3.4, 4.34}, {4.2, 4.22}, {6., 
        7.}}]}}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{1.9375, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{},
    PlotRange->{{2., 6.}, {0, 7.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       LineBox[{{2., 3.}, {3.385294117647059, 3.2323529411764707`}, {
        3.523529411764706, 4.488235294117647}, {5.1911764705882355`, 
        5.179411764705883}, {6., 7.}}]}}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{1.9375, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{},
    PlotRange->{{2., 6.}, {0, 7.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{}, {{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.019444444444444445`], AbsoluteThickness[1.6], 
       LineBox[{{2., 3.}, {4.315384615384615, 4.1692307692307695`}, {
        3.6076923076923078`, 4.584615384615384}, {6.176923076923077, 
        6.1461538461538465`}, {6., 7.}}]}}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{1.934735576923077, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    Method->{},
    PlotRange->{{2., 6.176923076923077}, {0, 7.}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.02], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6411108002667303`*^9, 3.641110967309086*^9}, {
  3.641111072931403*^9, 3.6411111045657473`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"A", "/.", 
     RowBox[{"{", 
      RowBox[{"x", "\[Rule]", "4"}], "}"}]}], ")"}], ".", "phi"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6411113077915077`*^9, 3.641111323928616*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.019444444444444445`],
      AbsoluteThickness[1.6], 
     LineBox[{{2., 3.}, {3.385294117647059, 3.2323529411764707`}, {
      3.523529411764706, 4.488235294117647}, {5.1911764705882355`, 
      5.179411764705883}, {6., 7.}}]}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1.9375, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{2., 6.}, {0, 7.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.641111311833304*^9, 3.641111324735631*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"x", ",", "y", ",", "z"}]], "Input",
 CellChangeTimes->{{3.6411113614209223`*^9, 3.641111362780856*^9}}],

Cell[BoxData["yo"], "Input",
 CellChangeTimes->{{3.641111373294148*^9, 3.641111376823036*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"y", "==", 
  RowBox[{"yo", "+", 
   RowBox[{"g", 
    RowBox[{"(", 
     RowBox[{"z", "-", "x"}], ")"}]}]}]}]], "Input",
 CellChangeTimes->{{3.641111383782886*^9, 3.641111400804551*^9}}],

Cell[BoxData[
 RowBox[{"y", "\[Equal]", 
  RowBox[{"yo", "+", 
   RowBox[{"g", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "x"}], "+", "z"}], ")"}]}]}]}]], "Output",
 CellChangeTimes->{{3.6411113982927017`*^9, 3.641111408629787*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Norm", "[", 
   RowBox[{"x", "-", "y"}], "]"}], "\[Equal]", 
  RowBox[{"Norm", "[", 
   RowBox[{"y", "-", "z"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.641111474911529*^9, 3.641111493715743*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Norm", "[", 
   RowBox[{"x", "-", "y"}], "]"}], "\[Equal]", 
  RowBox[{"Norm", "[", 
   RowBox[{"y", "-", "z"}], "]"}]}]], "Output",
 CellChangeTimes->{3.641111494235066*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Norm", "[", 
   RowBox[{"yo", "+", 
    RowBox[{"g", 
     RowBox[{"(", 
      RowBox[{"z", "-", "x"}], ")"}]}], "-", "x"}], "]"}], "\[Equal]", 
  RowBox[{"Norm", "[", 
   RowBox[{"yo", "+", 
    RowBox[{"g", 
     RowBox[{"(", 
      RowBox[{"z", "-", "x"}], ")"}]}], "-", "z"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6411115231052856`*^9, 3.641111551710464*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Norm", "[", 
   RowBox[{
    RowBox[{"-", "x"}], "+", "yo", "+", 
    RowBox[{"g", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "x"}], "+", "z"}], ")"}]}]}], "]"}], "\[Equal]", 
  RowBox[{"Norm", "[", 
   RowBox[{"yo", "-", "z", "+", 
    RowBox[{"g", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "x"}], "+", "z"}], ")"}]}]}], "]"}]}]], "Output",
 CellChangeTimes->{{3.641111542971521*^9, 3.641111552166587*^9}}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"y0", "=", 
   RowBox[{"{", 
    RowBox[{"y01", ",", "y02"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"z", "=", 
   RowBox[{"{", 
    RowBox[{"z1", ",", "z2"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{"{", 
    RowBox[{"x1", ",", "x2"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"y", "=", 
   RowBox[{"{", 
    RowBox[{"y1", ",", "y2"}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.6411116340972033`*^9, 3.641111674562029*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"y0", "=."}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"z", "=."}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "=."}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"y", "=."}], ";"}]}], "Input",
 CellChangeTimes->{{3.6411116340972033`*^9, 3.641111674562029*^9}, {
  3.641111787042431*^9, 3.641111799865602*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"yo", "+", 
    RowBox[{"g", 
     RowBox[{"(", 
      RowBox[{"z", "-", "x"}], ")"}]}], "-", "x"}], "]"}], ".", 
  RowBox[{"(", 
   RowBox[{"yo", "+", 
    RowBox[{"g", 
     RowBox[{"(", 
      RowBox[{"z", "-", "x"}], ")"}]}], "-", "x"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.641111572948235*^9, 3.641111628173696*^9}, {
  3.6411116907029247`*^9, 3.641111698254033*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "x1"}], "+", "yo", "+", 
      RowBox[{"g", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "x1"}], "+", "z1"}], ")"}]}]}], ",", 
     RowBox[{
      RowBox[{"-", "x2"}], "+", "yo", "+", 
      RowBox[{"g", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "x2"}], "+", "z2"}], ")"}]}]}]}], "}"}], "]"}], ".", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "x1"}], "+", "yo", "+", 
     RowBox[{"g", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "x1"}], "+", "z1"}], ")"}]}]}], ",", 
    RowBox[{
     RowBox[{"-", "x2"}], "+", "yo", "+", 
     RowBox[{"g", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "x2"}], "+", "z2"}], ")"}]}]}]}], "}"}]}]], "Output",
 CellChangeTimes->{
  3.641111628936699*^9, {3.641111679090208*^9, 3.641111698929596*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"yo", "+", 
    RowBox[{"g", 
     RowBox[{"(", 
      RowBox[{"z", "-", "x"}], ")"}]}], "-", "z"}], "]"}], ".", 
  RowBox[{"(", 
   RowBox[{"yo", "+", 
    RowBox[{"g", 
     RowBox[{"(", 
      RowBox[{"z", "-", "x"}], ")"}]}], "-", "z"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.641111615142294*^9, 3.6411116216677732`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"yo", "-", "z1", "+", 
      RowBox[{"g", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "x1"}], "+", "z1"}], ")"}]}]}], ",", 
     RowBox[{"yo", "-", "z2", "+", 
      RowBox[{"g", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "x2"}], "+", "z2"}], ")"}]}]}]}], "}"}], "]"}], ".", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"yo", "-", "z1", "+", 
     RowBox[{"g", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "x1"}], "+", "z1"}], ")"}]}]}], ",", 
    RowBox[{"yo", "-", "z2", "+", 
     RowBox[{"g", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "x2"}], "+", "z2"}], ")"}]}]}]}], "}"}]}]], "Output",
 CellChangeTimes->{3.641111630578156*^9, 3.6411116813188353`*^9}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.641111708671167*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Transpose", "[", "yo", "]"}], "+", 
      RowBox[{"g", " ", 
       RowBox[{"Transpose", "[", "z", "]"}]}], "-", 
      RowBox[{"g", " ", 
       RowBox[{"Transpose", "[", "x", "]"}]}], "-", 
      RowBox[{"Transpose", "[", "x", "]"}]}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"yo", "+", 
      RowBox[{"g", 
       RowBox[{"(", 
        RowBox[{"z", "-", "x"}], ")"}]}], "-", "x"}], ")"}]}], "==", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Transpose", "[", "yo", "]"}], "+", 
      RowBox[{"g", " ", 
       RowBox[{"Transpose", "[", "z", "]"}]}], "-", 
      RowBox[{"g", " ", 
       RowBox[{"Transpose", "[", "x", "]"}]}], "-", 
      RowBox[{"Transpose", "[", "z", "]"}]}], ")"}], "*", 
    RowBox[{"(", 
     RowBox[{"yo", "+", 
      RowBox[{"g", 
       RowBox[{"(", 
        RowBox[{"z", "-", "x"}], ")"}]}], "-", "z"}], ")"}]}]}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.6411117134287*^9, 3.641111774160392*^9}, {
  3.64111180981892*^9, 3.641111810652079*^9}, {3.64111185990666*^9, 
  3.6411118702847958`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "+", 
      RowBox[{"2", " ", "g", " ", "x"}], "-", "yo", "-", 
      RowBox[{"2", " ", "g", " ", "z"}]}], ")"}], " ", 
    RowBox[{"Transpose", "[", "x", "]"}]}], "+", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "x"}], "+", "z"}], ")"}], " ", 
    RowBox[{"Transpose", "[", "yo", "]"}]}], "+", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "2"}], " ", "g", " ", "x"}], "+", "yo", "-", "z", "+", 
      RowBox[{"2", " ", "g", " ", "z"}]}], ")"}], " ", 
    RowBox[{"Transpose", "[", "z", "]"}]}]}], "\[Equal]", "0"}]], "Output",
 CellChangeTimes->{{3.641111747501449*^9, 3.6411117665216303`*^9}, 
   3.641111806319788*^9, {3.6411118559883337`*^9, 3.641111870910334*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "+", 
       RowBox[{"2", " ", "g", " ", "x"}], "-", "yo", "-", 
       RowBox[{"2", " ", "g", " ", "z"}]}], ")"}], " ", 
     RowBox[{"Transpose", "[", "x", "]"}]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "x"}], "+", "z"}], ")"}], " ", 
     RowBox[{"Transpose", "[", "yo", "]"}]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "2"}], " ", "g", " ", "x"}], "+", "yo", "-", "z", "+", 
       RowBox[{"2", " ", "g", " ", "z"}]}], ")"}], " ", 
     RowBox[{"Transpose", "[", "z", "]"}]}]}], "\[Equal]", "0"}], "//", 
  "Expand"}]], "Input",
 CellChangeTimes->{{3.6411121204822397`*^9, 3.641112122501999*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"x", " ", 
    RowBox[{"Transpose", "[", "x", "]"}]}], "+", 
   RowBox[{"2", " ", "g", " ", "x", " ", 
    RowBox[{"Transpose", "[", "x", "]"}]}], "-", 
   RowBox[{"yo", " ", 
    RowBox[{"Transpose", "[", "x", "]"}]}], "-", 
   RowBox[{"2", " ", "g", " ", "z", " ", 
    RowBox[{"Transpose", "[", "x", "]"}]}], "-", 
   RowBox[{"x", " ", 
    RowBox[{"Transpose", "[", "yo", "]"}]}], "+", 
   RowBox[{"z", " ", 
    RowBox[{"Transpose", "[", "yo", "]"}]}], "-", 
   RowBox[{"2", " ", "g", " ", "x", " ", 
    RowBox[{"Transpose", "[", "z", "]"}]}], "+", 
   RowBox[{"yo", " ", 
    RowBox[{"Transpose", "[", "z", "]"}]}], "-", 
   RowBox[{"z", " ", 
    RowBox[{"Transpose", "[", "z", "]"}]}], "+", 
   RowBox[{"2", " ", "g", " ", "z", " ", 
    RowBox[{"Transpose", "[", "z", "]"}]}]}], "\[Equal]", "0"}]], "Output",
 CellChangeTimes->{3.641112122828822*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"x", " ", 
     RowBox[{"Transpose", "[", "x", "]"}]}], "+", 
    RowBox[{"2", " ", "g", " ", "x", " ", 
     RowBox[{"Transpose", "[", "x", "]"}]}], "-", 
    RowBox[{"yo", " ", 
     RowBox[{"Transpose", "[", "x", "]"}]}], "-", 
    RowBox[{"2", " ", "g", " ", "z", " ", 
     RowBox[{"Transpose", "[", "x", "]"}]}], "-", 
    RowBox[{"yo", " ", 
     RowBox[{"Transpose", "[", "x", "]"}]}], "+", 
    RowBox[{"yo", " ", 
     RowBox[{"Transpose", "[", "z", "]"}]}], "-", 
    RowBox[{"2", " ", "g", " ", "z", " ", 
     RowBox[{"Transpose", "[", "x", "]"}]}], "+", 
    RowBox[{"yo", " ", 
     RowBox[{"Transpose", "[", "z", "]"}]}], "-", 
    RowBox[{"z", " ", 
     RowBox[{"Transpose", "[", "z", "]"}]}], "+", 
    RowBox[{"2", " ", "g", " ", "z", " ", 
     RowBox[{"Transpose", "[", "z", "]"}]}]}], "\[Equal]", "0"}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{
  3.641112150765318*^9, {3.641112182621838*^9, 3.6411122267794437`*^9}, {
   3.641112259941329*^9, 3.641112322959064*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", "+", 
        RowBox[{"2", " ", "g", " ", "x"}], "-", 
        RowBox[{"2", " ", 
         RowBox[{"(", 
          RowBox[{"yo", "+", 
           RowBox[{"2", " ", "g", " ", "z"}]}], ")"}]}]}], ")"}], " ", 
      RowBox[{"Transpose", "[", "x", "]"}]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", " ", "yo"}], "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "+", 
           RowBox[{"2", " ", "g"}]}], ")"}], " ", "z"}]}], ")"}], " ", 
      RowBox[{"Transpose", "[", "z", "]"}]}]}], "\[Equal]", "0"}], ",", 
   "yo"}], "]"}]], "Input",
 CellChangeTimes->{{3.641112415597907*^9, 3.641112431512446*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"yo", "\[Rule]", 
    FractionBox[
     RowBox[{
      RowBox[{"x", " ", 
       RowBox[{"Transpose", "[", "x", "]"}]}], "+", 
      RowBox[{"2", " ", "g", " ", "x", " ", 
       RowBox[{"Transpose", "[", "x", "]"}]}], "-", 
      RowBox[{"4", " ", "g", " ", "z", " ", 
       RowBox[{"Transpose", "[", "x", "]"}]}], "-", 
      RowBox[{"z", " ", 
       RowBox[{"Transpose", "[", "z", "]"}]}], "+", 
      RowBox[{"2", " ", "g", " ", "z", " ", 
       RowBox[{"Transpose", "[", "z", "]"}]}]}], 
     RowBox[{"2", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Transpose", "[", "x", "]"}], "-", 
        RowBox[{"Transpose", "[", "z", "]"}]}], ")"}]}]]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.6411124227571*^9, 3.641112431969912*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    RowBox[{"2", " ", "g", " ", 
     SuperscriptBox["x", "2"]}], "-", 
    RowBox[{"4", " ", "g", " ", "z", " ", 
     RowBox[{"Transpose", "[", "x", "]"}]}], "-", 
    SuperscriptBox["z", "2"], "+", 
    RowBox[{"2", " ", "g", " ", 
     SuperscriptBox["z", "2"]}]}], 
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Transpose", "[", "x", "]"}], "-", 
      RowBox[{"Transpose", "[", "z", "]"}]}], ")"}]}]], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.641112483097261*^9, 3.6411125295063057`*^9}}],

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "g"}]}], ")"}], " ", 
    SuperscriptBox["x", "2"]}], "+", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"2", " ", "g"}]}], ")"}], " ", 
    SuperscriptBox["z", "2"]}], "-", 
   RowBox[{"4", " ", "g", " ", "z", " ", 
    RowBox[{"Transpose", "[", "x", "]"}]}]}], 
  RowBox[{"2", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Transpose", "[", "x", "]"}], "-", 
     RowBox[{"Transpose", "[", "z", "]"}]}], ")"}]}]]], "Output",
 CellChangeTimes->{{3.641112513027521*^9, 3.641112529958033*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"2", 
   RowBox[{"(", 
    RowBox[{"x", "-", "z"}], ")"}], "yo"}], "\[Equal]", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", "g"}], "+", "1"}], ")"}], 
    SuperscriptBox["x", "2"]}], "+", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", "g"}], "-", "1"}], ")"}], 
    SuperscriptBox["z", "2"]}], "-", 
   RowBox[{"4", "g", " ", "z", " ", "x"}]}]}]], "Input",
 CellChangeTimes->{{3.641112577923856*^9, 3.641112625908702*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", "g"}], "+", "1"}], ")"}], 
    SuperscriptBox["x", "2"]}], "+", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"2", "g"}], "-", "1"}], ")"}], 
    SuperscriptBox["z", "2"]}], "-", 
   RowBox[{"4", "g", " ", "z", " ", "x"}]}], "//", "FullSimplify"}]], "Input",\

 CellChangeTimes->{{3.6411126674947987`*^9, 3.641112670152281*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "-", "z"}], ")"}], " ", 
  RowBox[{"(", 
   RowBox[{"x", "+", 
    RowBox[{"2", " ", "g", " ", "x"}], "+", "z", "-", 
    RowBox[{"2", " ", "g", " ", "z"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.64111267052811*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"yo", "\[Equal]", " ", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "+", 
     RowBox[{"2", " ", "g", " ", "x"}], "+", "z", "-", 
     RowBox[{"2", " ", "g", " ", "z"}]}], ")"}], "/", "2"}]}]], "Input",
 CellChangeTimes->{{3.6411126803460207`*^9, 3.641112694804667*^9}}],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "+", 
      RowBox[{"2", " ", "g", " ", "x"}], "+", "z", "-", 
      RowBox[{"2", " ", "g", " ", "z"}]}], ")"}], "/", "2"}], "//", 
   "FullSimplify"}]}]], "Input",
 CellChangeTimes->{{3.641112729853362*^9, 3.6411127320671186`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"2", "g"}]}], ")"}], "x"}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "-", 
       RowBox[{"2", "g"}]}], ")"}], "z"}]}], ")"}], "/", "2"}]], "Input",
 CellChangeTimes->{{3.641112739498515*^9, 3.641112780542224*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "=", 
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "+", 
         RowBox[{"2", "g"}]}], ",", "1", ",", 
        RowBox[{"1", "-", 
         RowBox[{"2", "g"}]}], ",", "0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", "g"}]}], ",", "1", ",", 
        RowBox[{"1", "-", 
         RowBox[{"2", "g"}]}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", "g"}]}], ",", "1", ",", 
        RowBox[{"1", "-", 
         RowBox[{"2", "g"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "2"}], "}"}]}], 
     "}"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.641112821115326*^9, 3.641112868058816*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.641112848905607*^9, 3.641112854941038*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "0", "0", "0"},
     {
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "g"}]}], ")"}]}], 
      FractionBox["1", "2"], 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{"2", " ", "g"}]}], ")"}]}], "0", "0"},
     {"0", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "g"}]}], ")"}]}], 
      FractionBox["1", "2"], 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{"2", " ", "g"}]}], ")"}]}], "0"},
     {"0", "0", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "g"}]}], ")"}]}], 
      FractionBox["1", "2"], 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{"2", " ", "g"}]}], ")"}]}]},
     {"0", "0", "0", "0", "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.641112849305904*^9, 3.641112870650028*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ultiMatrix", "=", 
   RowBox[{"(", 
    RowBox[{"Inverse", "[", "m", "]"}], ")"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.64111287886926*^9, 3.6411129056096487`*^9}, 
   3.6411129412967978`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"phi", "//", "ListPlot"}]], "Input",
 CellChangeTimes->{{3.641112908155603*^9, 3.641112910315556*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{2., 3.}, {3.1, 4.}, {4.2, 4.8}, {5., 5.9}, {6., 
      7.}}]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1.9375, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{2., 6.}, {0, 7.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.641112910581024*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Norm", "/@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", "ultiMatrix", ")"}], ".", "phi"}], ")"}], "//", 
        "Differences"}], ")"}]}], "//", "N"}], "//", "Variance"}], ",", 
   RowBox[{"{", 
    RowBox[{"g", ",", "0.9245", ",", "0.9248"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.641112915225889*^9, 3.641113042304449*^9}, {
  3.641113098550654*^9, 3.641113282364594*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
    1.], LineBox[CompressedData["
1:eJwl1HkwHGYUAPDNRpyDVMcRR8WmrqBEsagjG5HDFWRJ4moQQqWUktA0rrBZ
5ybNIuxSlZS1UclmQxu0TdXWZohjIrEoIUKxWBVLGNG+J398881vvm/ee/Pm
e59BRIJ/FJFAIATDwr38oaFsVsmCa8UVdtCitMv19Mm2LnRKdNBJtMay/41s
8DcOel5opmWmbg74ViXPGc3gDltfAzeFqRugc6sZnxeBQ/8UziyAW6hT7RXg
vVaSJLTGWR23OnD3rzqKaJ+Z/Bw+OHuPI2ce3Gs/3fsYnHQr1w19adzA/imY
194wJwaf9z3OHQZTwt8x0DbO3NF/wFr61U5okyyxxQp41+v5N3Pgc0Va9B2l
C65F62wuunPJ8D9lsIpvcBxarv8CWRtc42BjjWakfZ9mDO7Lr1mfBbukPRB9
Cv6SJn2CtqXwKBSwQuYQC61Am43zAVtr2iejZUhEfhBYnelBRRc2kkJDwEbG
gb5o9c/c5MLAR5ipXmgjak5wOLh8c4c7+ihNViYGzN5lTEaTmjL048DUAfMD
6M3Jt47x4OeHs83QL9SSAhPBU4HGRmgeRZyYDI5S1DVAV0W87L0Ejvh5Swed
f/WZxWVw1aSLJvrinc6CdLCw+G81dKSgdTYL/PGjQRU0V3CQRgeHF++URy8L
BCQG2H+8jIh++m+Ldwl42q9nawbM0bufygLT01020XUWLJMacNjs0Aa61pkm
4oCH9aa3bZ82oXEPPBT7/n7XQ6eAJnColWg7XnejTXIrOE/Kfp+PY37zD4zP
L5XbroemTRaCoxfPbNerGSU/0gO+8YSugV6JJa/0g9s5L7TRffHRys/BKQ++
1kfTUztcR8D1h1mm2/1IiGeNYb89qi3RUdFaaxPgbG+iHfoQ9ULjDFjZe9QN
HZARQ50DH2v+9ig6hntuQ4z9uWbtiS4ihB6RgMfCJ/zRogbvMSlYsOoZiS4J
UTUjlsE8Cetz0ayBtixVcHX5V/fRwtseUh3wj8SCUXS/5IP9JuDr4goVfK/7
ZAQxtuCNDPfjaHbC6Q4KuPSKdi469Pag6Qnw2ejcLrT7J+SGYLDoYroazoui
XZ/kPNhhbi0ErSkb4JwCrgpw5KM9LVrqssB5EePyOI+dukq6DLD8X55x6L15
JX5sMGmyrB9d7UW4wwHbL6jb4XzHiAIJzZjf8SYHfaq1KK0dXFlbq4X/xT6d
LX4P2jKyAE12C3o7Ap4i+SlLwEntpWdmwD8U3y1AvwoxFKLDHu+/jvZf49vN
4vnlu0z0AfP+D+fA68W8SvRSiVKPGKxo2ncPHR+beUiC9ZqdGkCP7VTloetX
F0Von6pK/SVwhyd9FG3xrGUT/eq736fR807S5mVwOfPgOjpk8KrhG7DCT6/f
obsT1ZhojRP5xCVwQ61l4grY1mpYCa1L+e0leik+Zze6cMTLRwr+hWyljt5M
GWlDP8ob3YOO2/2F2So4NarwI/T/y0BB8w==
     "]]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.9245000000000001, 0.21844205},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None},
  PlotRange->{{0.9245, 0.9248}, {0.21844208000750148`, 0.2184429310953353}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6411129356708717`*^9, 3.64111304260859*^9}, {
  3.641113113331757*^9, 3.6411132830777597`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"ultiMatrix", "/.", 
      RowBox[{"{", 
       RowBox[{"g", "\[Rule]", "0.924"}], "}"}]}], ")"}], ".", "phi"}], ")"}],
   "//", "ListPlot"}]], "Input",
 CellChangeTimes->{{3.6411132927460213`*^9, 3.6411133152418613`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], 
     PointBox[{{2., 3.}, {3.3779675730265537`, 3.265237186735018}, {
      3.3891127040407483`, 4.492024984357333}, {5.435807018891952, 
      4.942712844550318}, {6., 7.}}]}, {}}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1.9375, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{},
  PlotRange->{{2., 6.}, {0, 7.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.641113300112999*^9, 3.641113315526716*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       SuperscriptBox["x", "2"], 
       SuperscriptBox["b", "2"]}], "+", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "-", "x"}], ")"}], "2"], 
       SuperscriptBox["bp", "2"]}], "+", 
      SuperscriptBox["a", "2"], "+", 
      RowBox[{"2", "x", 
       RowBox[{"(", 
        RowBox[{"1", "-", "x"}], ")"}], "bbp"}], "-", 
      RowBox[{"2", "x", " ", "ba"}], "-", 
      RowBox[{"2", 
       RowBox[{"(", 
        RowBox[{"1", "-", "x"}], ")"}], "bpa"}]}], "\[Equal]", 
     SuperscriptBox["r", "2"]}], ",", "x"}], "]"}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.641120004219613*^9, 3.641120110930253*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     FractionBox[
      RowBox[{"ba", "-", "bbp", "+", 
       SuperscriptBox["bp", "2"], "-", "bpa", "-", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SqrtBox[
         RowBox[{
          RowBox[{"4", " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"ba", "-", "bbp", "+", 
              SuperscriptBox["bp", "2"], "-", "bpa"}], ")"}], "2"]}], "-", 
          RowBox[{"4", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["b", "2"], "-", 
             RowBox[{"2", " ", "bbp"}], "+", 
             SuperscriptBox["bp", "2"]}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["a", "2"], "+", 
             SuperscriptBox["bp", "2"], "-", 
             RowBox[{"2", " ", "bpa"}], "-", 
             SuperscriptBox["r", "2"]}], ")"}]}]}]]}]}], 
      RowBox[{
       SuperscriptBox["b", "2"], "-", 
       RowBox[{"2", " ", "bbp"}], "+", 
       SuperscriptBox["bp", "2"]}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     FractionBox[
      RowBox[{"ba", "-", "bbp", "+", 
       SuperscriptBox["bp", "2"], "-", "bpa", "+", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        SqrtBox[
         RowBox[{
          RowBox[{"4", " ", 
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"ba", "-", "bbp", "+", 
              SuperscriptBox["bp", "2"], "-", "bpa"}], ")"}], "2"]}], "-", 
          RowBox[{"4", " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["b", "2"], "-", 
             RowBox[{"2", " ", "bbp"}], "+", 
             SuperscriptBox["bp", "2"]}], ")"}], " ", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["a", "2"], "+", 
             SuperscriptBox["bp", "2"], "-", 
             RowBox[{"2", " ", "bpa"}], "-", 
             SuperscriptBox["r", "2"]}], ")"}]}]}]]}]}], 
      RowBox[{
       SuperscriptBox["b", "2"], "-", 
       RowBox[{"2", " ", "bbp"}], "+", 
       SuperscriptBox["bp", "2"]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.641120105550997*^9, 3.6411201141788893`*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6411202747188787`*^9, 3.641120275426832*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.641120005806459*^9, 3.6411200216427298`*^9}}]
},
WindowSize->{956, 1037},
WindowMargins->{{Automatic, 0}, {Automatic, 20}},
FrontEndVersion->"10.1 for Linux x86 (64-bit) (March 23, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[400, 13, 3012, 79, 145, "Input"],
Cell[CellGroupData[{
Cell[3437, 96, 1346, 35, 107, "Input"],
Cell[4786, 133, 112481, 1857, 328, 30782, 517, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117304, 1995, 1006, 29, 50, "Input"],
Cell[118313, 2026, 1437, 33, 240, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119787, 2064, 1161, 31, 68, "Input"],
Cell[120951, 2097, 1393, 32, 244, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122381, 2134, 1001, 29, 50, "Input"],
Cell[123385, 2165, 1962, 41, 325, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[125384, 2211, 1106, 26, 50, "Input"],
Cell[126493, 2239, 16002, 321, 219, "Output"]
}, Open  ]],
Cell[142510, 2563, 1168, 22, 31, "Input"],
Cell[CellGroupData[{
Cell[143703, 2589, 427, 11, 31, "Input"],
Cell[144133, 2602, 1964, 40, 387, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146134, 2647, 568, 12, 31, "Input"],
Cell[146705, 2661, 213, 3, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146955, 2669, 320, 7, 31, "Input"],
Cell[147278, 2678, 102, 1, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[147417, 2684, 436, 15, 35, "Input"],
Cell[147856, 2701, 302, 8, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[148195, 2714, 747, 23, 59, "Input"],
Cell[148945, 2739, 1003, 27, 243, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[149985, 2771, 689, 23, 59, "Input"],
Cell[150677, 2796, 543, 18, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[151257, 2819, 1221, 36, 57, "Input"],
Cell[152481, 2857, 246, 6, 59, "Output"]
}, Open  ]],
Cell[152742, 2866, 96, 1, 29, "Input"],
Cell[CellGroupData[{
Cell[152863, 2871, 464, 13, 31, "Input"],
Cell[153330, 2886, 723, 23, 59, "Output"]
}, Open  ]],
Cell[154068, 2912, 1173, 33, 59, "Input"],
Cell[155244, 2947, 94, 1, 29, "Input"],
Cell[155341, 2950, 912, 25, 59, "Input"],
Cell[CellGroupData[{
Cell[156278, 2979, 735, 23, 31, "Input"],
Cell[157016, 3004, 1271, 41, 59, "Output"]
}, Open  ]],
Cell[158302, 3048, 268, 7, 31, "Input"],
Cell[CellGroupData[{
Cell[158595, 3059, 422, 9, 31, "Input"],
Cell[159020, 3070, 4882, 130, 281, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[163939, 3205, 270, 8, 31, "Input"],
Cell[164212, 3215, 1023, 27, 243, "Output"]
}, Open  ]],
Cell[165250, 3245, 127, 2, 31, "Input"],
Cell[165380, 3249, 94, 1, 31, "Input"],
Cell[CellGroupData[{
Cell[165499, 3254, 210, 6, 31, "Input"],
Cell[165712, 3262, 246, 7, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165995, 3274, 232, 6, 31, "Input"],
Cell[166230, 3282, 209, 6, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166476, 3293, 402, 12, 31, "Input"],
Cell[166881, 3307, 477, 15, 31, "Output"]
}, Open  ]],
Cell[167373, 3325, 548, 17, 88, "Input"],
Cell[167924, 3344, 375, 10, 86, "Input"],
Cell[CellGroupData[{
Cell[168324, 3358, 441, 13, 31, "Input"],
Cell[168768, 3373, 945, 32, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169750, 3410, 392, 12, 31, "Input"],
Cell[170145, 3424, 834, 27, 31, "Output"]
}, Open  ]],
Cell[170994, 3454, 68, 1, 29, "Input"],
Cell[CellGroupData[{
Cell[171087, 3459, 1156, 34, 50, "Input"],
Cell[172246, 3495, 807, 22, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[173090, 3522, 783, 23, 50, "Input"],
Cell[173876, 3547, 906, 23, 50, "Output"]
}, Open  ]],
Cell[174797, 3573, 1065, 27, 50, "Input"],
Cell[CellGroupData[{
Cell[175887, 3604, 811, 25, 31, "Input"],
Cell[176701, 3631, 815, 22, 63, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[177553, 3658, 622, 18, 66, "Input"],
Cell[178178, 3678, 657, 21, 66, "Output"]
}, Open  ]],
Cell[178850, 3702, 503, 17, 35, "Input"],
Cell[CellGroupData[{
Cell[179378, 3723, 439, 15, 35, "Input"],
Cell[179820, 3740, 275, 8, 31, "Output"]
}, Open  ]],
Cell[180110, 3751, 294, 7, 31, "Input"],
Cell[180407, 3760, 320, 9, 31, "Input"],
Cell[180730, 3771, 354, 12, 31, "Input"],
Cell[181087, 3785, 1011, 30, 59, "Input"],
Cell[CellGroupData[{
Cell[182123, 3819, 125, 2, 31, "Input"],
Cell[182251, 3823, 1692, 54, 144, "Output"]
}, Open  ]],
Cell[183958, 3880, 231, 6, 31, "Input"],
Cell[CellGroupData[{
Cell[184214, 3890, 125, 2, 31, "Input"],
Cell[184342, 3894, 903, 26, 243, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[185282, 3925, 528, 15, 31, "Input"],
Cell[185813, 3942, 2585, 53, 214, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[188435, 4000, 305, 9, 31, "Input"],
Cell[188743, 4011, 1024, 27, 243, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[189804, 4043, 769, 24, 38, "Input"],
Cell[190576, 4069, 2227, 63, 159, "Output"]
}, Open  ]],
Cell[192818, 4135, 94, 1, 29, "Input"],
Cell[192915, 4138, 94, 1, 29, "Input"]
}
]
*)

